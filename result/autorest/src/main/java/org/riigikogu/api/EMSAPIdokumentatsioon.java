/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package org.riigikogu.api;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import org.joda.time.LocalDate;
import org.riigikogu.api.models.Agenda;
import org.riigikogu.api.models.AgendaStenoUrl;
import org.riigikogu.api.models.Classifier;
import org.riigikogu.api.models.ClassifierValueDetails;
import org.riigikogu.api.models.CollectiveAddress;
import org.riigikogu.api.models.CommitteeSitting;
import org.riigikogu.api.models.Contacts;
import org.riigikogu.api.models.Document;
import org.riigikogu.api.models.DocumentTree;
import org.riigikogu.api.models.DocumentTypes;
import org.riigikogu.api.models.DraftInitiators;
import org.riigikogu.api.models.DraftVolume;
import org.riigikogu.api.models.ErjkProtocol;
import org.riigikogu.api.models.EventCalendar;
import org.riigikogu.api.models.Events;
import org.riigikogu.api.models.FactionSpeech;
import org.riigikogu.api.models.FileMetadata;
import org.riigikogu.api.models.Hallplan;
import org.riigikogu.api.models.LastStenoSpeech;
import org.riigikogu.api.models.MemberParticipation;
import org.riigikogu.api.models.Membership;
import org.riigikogu.api.models.PagedResourcesOfDocument;
import org.riigikogu.api.models.PagedResourcesOfDraftVolumes;
import org.riigikogu.api.models.PagedResourcesOfEuropeanUnionDocument;
import org.riigikogu.api.models.PagedResourcesOfInterpellations;
import org.riigikogu.api.models.PagedResourcesOfOtherQuestions;
import org.riigikogu.api.models.PagedResourcesOfPlenaryMemberSitting;
import org.riigikogu.api.models.PagedResourcesOfVolumes;
import org.riigikogu.api.models.PagedResourcesOfWrittenQuestions;
import org.riigikogu.api.models.PlenaryMember;
import org.riigikogu.api.models.PlenaryMemberDetails;
import org.riigikogu.api.models.PlenaryMemberVoting;
import org.riigikogu.api.models.PlenarySittingVoting;
import org.riigikogu.api.models.PlenaryVotingDetails;
import org.riigikogu.api.models.Session;
import org.riigikogu.api.models.StenoSpeeches;
import org.riigikogu.api.models.StenoSpeechesCount;
import org.riigikogu.api.models.UnitAgenda;
import org.riigikogu.api.models.UserDetails;
import org.riigikogu.api.models.UserGroup;
import org.riigikogu.api.models.Volume;
import org.riigikogu.api.models.VolumeTypes;
import org.riigikogu.api.models.VotingCalendar;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for EMSAPIdokumentatsioon class.
 */
public interface EMSAPIdokumentatsioon {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "http://api.riigikogu.ee";

    /**
     * Täiskogu päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Agenda object if successful.
     */
    Agenda getPlenaryAgendaUsingGET();

    /**
     * Täiskogu päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Agenda> getPlenaryAgendaUsingGETAsync(final ServiceCallback<Agenda> serviceCallback);

    /**
     * Täiskogu päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Agenda object
     */
    Observable<Agenda> getPlenaryAgendaUsingGETAsync();

    /**
     * Täiskogu päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Agenda object
     */
    Observable<ServiceResponse<Agenda>> getPlenaryAgendaUsingGETWithServiceResponseAsync();
    /**
     * Täiskogu päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param dateParameter Kuupäev nädalas, mille päevakorda soovitakse
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid? (true/false)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Agenda object if successful.
     */
    Agenda getPlenaryAgendaUsingGET(LocalDate dateParameter, LocalDate endDate, String lang, Boolean querySteno, LocalDate startDate);

    /**
     * Täiskogu päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param dateParameter Kuupäev nädalas, mille päevakorda soovitakse
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid? (true/false)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Agenda> getPlenaryAgendaUsingGETAsync(LocalDate dateParameter, LocalDate endDate, String lang, Boolean querySteno, LocalDate startDate, final ServiceCallback<Agenda> serviceCallback);

    /**
     * Täiskogu päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param dateParameter Kuupäev nädalas, mille päevakorda soovitakse
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid? (true/false)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Agenda object
     */
    Observable<Agenda> getPlenaryAgendaUsingGETAsync(LocalDate dateParameter, LocalDate endDate, String lang, Boolean querySteno, LocalDate startDate);

    /**
     * Täiskogu päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param dateParameter Kuupäev nädalas, mille päevakorda soovitakse
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid? (true/false)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Agenda object
     */
    Observable<ServiceResponse<Agenda>> getPlenaryAgendaUsingGETWithServiceResponseAsync(LocalDate dateParameter, LocalDate endDate, String lang, Boolean querySteno, LocalDate startDate);

    /**
     * Üksuse päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param uuid Kasutajagrupi UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UnitAgenda object if successful.
     */
    UnitAgenda getUnitAgendaUsingGET(String uuid);

    /**
     * Üksuse päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param uuid Kasutajagrupi UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UnitAgenda> getUnitAgendaUsingGETAsync(String uuid, final ServiceCallback<UnitAgenda> serviceCallback);

    /**
     * Üksuse päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param uuid Kasutajagrupi UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UnitAgenda object
     */
    Observable<UnitAgenda> getUnitAgendaUsingGETAsync(String uuid);

    /**
     * Üksuse päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param uuid Kasutajagrupi UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UnitAgenda object
     */
    Observable<ServiceResponse<UnitAgenda>> getUnitAgendaUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Üksuse päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param uuid Kasutajagrupi UUID
     * @param dateParameter Kuupäev nädalas, mille päevakorda soovitakse
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UnitAgenda object if successful.
     */
    UnitAgenda getUnitAgendaUsingGET(String uuid, LocalDate dateParameter, LocalDate endDate, String lang, LocalDate startDate);

    /**
     * Üksuse päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param uuid Kasutajagrupi UUID
     * @param dateParameter Kuupäev nädalas, mille päevakorda soovitakse
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UnitAgenda> getUnitAgendaUsingGETAsync(String uuid, LocalDate dateParameter, LocalDate endDate, String lang, LocalDate startDate, final ServiceCallback<UnitAgenda> serviceCallback);

    /**
     * Üksuse päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param uuid Kasutajagrupi UUID
     * @param dateParameter Kuupäev nädalas, mille päevakorda soovitakse
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UnitAgenda object
     */
    Observable<UnitAgenda> getUnitAgendaUsingGETAsync(String uuid, LocalDate dateParameter, LocalDate endDate, String lang, LocalDate startDate);

    /**
     * Üksuse päevakord.
     * Päevakorda saab küsida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param uuid Kasutajagrupi UUID
     * @param dateParameter Kuupäev nädalas, mille päevakorda soovitakse
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UnitAgenda object
     */
    Observable<ServiceResponse<UnitAgenda>> getUnitAgendaUsingGETWithServiceResponseAsync(String uuid, LocalDate dateParameter, LocalDate endDate, String lang, LocalDate startDate);

    /**
     * Klassifikaatorid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Classifier&gt; object if successful.
     */
    List<Classifier> getClassifiersUsingGET();

    /**
     * Klassifikaatorid.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Classifier>> getClassifiersUsingGETAsync(final ServiceCallback<List<Classifier>> serviceCallback);

    /**
     * Klassifikaatorid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Classifier&gt; object
     */
    Observable<List<Classifier>> getClassifiersUsingGETAsync();

    /**
     * Klassifikaatorid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Classifier&gt; object
     */
    Observable<ServiceResponse<List<Classifier>>> getClassifiersUsingGETWithServiceResponseAsync();

    /**
     * Klassifikaatori väärtus.
     *
     * @param classifierCode Klassifikaatori kood
     * @param valueCode Väärtuse kood
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassifierValueDetails object if successful.
     */
    ClassifierValueDetails getClassifierValueUsingGET(String classifierCode, String valueCode);

    /**
     * Klassifikaatori väärtus.
     *
     * @param classifierCode Klassifikaatori kood
     * @param valueCode Väärtuse kood
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ClassifierValueDetails> getClassifierValueUsingGETAsync(String classifierCode, String valueCode, final ServiceCallback<ClassifierValueDetails> serviceCallback);

    /**
     * Klassifikaatori väärtus.
     *
     * @param classifierCode Klassifikaatori kood
     * @param valueCode Väärtuse kood
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassifierValueDetails object
     */
    Observable<ClassifierValueDetails> getClassifierValueUsingGETAsync(String classifierCode, String valueCode);

    /**
     * Klassifikaatori väärtus.
     *
     * @param classifierCode Klassifikaatori kood
     * @param valueCode Väärtuse kood
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassifierValueDetails object
     */
    Observable<ServiceResponse<ClassifierValueDetails>> getClassifierValueUsingGETWithServiceResponseAsync(String classifierCode, String valueCode);
    /**
     * Klassifikaatori väärtus.
     *
     * @param classifierCode Klassifikaatori kood
     * @param valueCode Väärtuse kood
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClassifierValueDetails object if successful.
     */
    ClassifierValueDetails getClassifierValueUsingGET(String classifierCode, String valueCode, String lang);

    /**
     * Klassifikaatori väärtus.
     *
     * @param classifierCode Klassifikaatori kood
     * @param valueCode Väärtuse kood
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ClassifierValueDetails> getClassifierValueUsingGETAsync(String classifierCode, String valueCode, String lang, final ServiceCallback<ClassifierValueDetails> serviceCallback);

    /**
     * Klassifikaatori väärtus.
     *
     * @param classifierCode Klassifikaatori kood
     * @param valueCode Väärtuse kood
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassifierValueDetails object
     */
    Observable<ClassifierValueDetails> getClassifierValueUsingGETAsync(String classifierCode, String valueCode, String lang);

    /**
     * Klassifikaatori väärtus.
     *
     * @param classifierCode Klassifikaatori kood
     * @param valueCode Väärtuse kood
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClassifierValueDetails object
     */
    Observable<ServiceResponse<ClassifierValueDetails>> getClassifierValueUsingGETWithServiceResponseAsync(String classifierCode, String valueCode, String lang);

    /**
     * Klassifikaatori väärtused.
     *
     * @param code Klassifikaatori kood
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ClassifierValueDetails&gt; object if successful.
     */
    List<ClassifierValueDetails> getClassifierValuesUsingGET(String code);

    /**
     * Klassifikaatori väärtused.
     *
     * @param code Klassifikaatori kood
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ClassifierValueDetails>> getClassifierValuesUsingGETAsync(String code, final ServiceCallback<List<ClassifierValueDetails>> serviceCallback);

    /**
     * Klassifikaatori väärtused.
     *
     * @param code Klassifikaatori kood
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ClassifierValueDetails&gt; object
     */
    Observable<List<ClassifierValueDetails>> getClassifierValuesUsingGETAsync(String code);

    /**
     * Klassifikaatori väärtused.
     *
     * @param code Klassifikaatori kood
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ClassifierValueDetails&gt; object
     */
    Observable<ServiceResponse<List<ClassifierValueDetails>>> getClassifierValuesUsingGETWithServiceResponseAsync(String code);
    /**
     * Klassifikaatori väärtused.
     *
     * @param code Klassifikaatori kood
     * @param includeInactive Kaasa mitteaktiivsed väärtused? (true/false)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ClassifierValueDetails&gt; object if successful.
     */
    List<ClassifierValueDetails> getClassifierValuesUsingGET(String code, Boolean includeInactive, String lang);

    /**
     * Klassifikaatori väärtused.
     *
     * @param code Klassifikaatori kood
     * @param includeInactive Kaasa mitteaktiivsed väärtused? (true/false)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ClassifierValueDetails>> getClassifierValuesUsingGETAsync(String code, Boolean includeInactive, String lang, final ServiceCallback<List<ClassifierValueDetails>> serviceCallback);

    /**
     * Klassifikaatori väärtused.
     *
     * @param code Klassifikaatori kood
     * @param includeInactive Kaasa mitteaktiivsed väärtused? (true/false)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ClassifierValueDetails&gt; object
     */
    Observable<List<ClassifierValueDetails>> getClassifierValuesUsingGETAsync(String code, Boolean includeInactive, String lang);

    /**
     * Klassifikaatori väärtused.
     *
     * @param code Klassifikaatori kood
     * @param includeInactive Kaasa mitteaktiivsed väärtused? (true/false)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ClassifierValueDetails&gt; object
     */
    Observable<ServiceResponse<List<ClassifierValueDetails>>> getClassifierValuesUsingGETWithServiceResponseAsync(String code, Boolean includeInactive, String lang);

    /**
     * Kontaktide nimekiri.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Contacts&gt; object if successful.
     */
    List<Contacts> getContactsUsingGET();

    /**
     * Kontaktide nimekiri.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Contacts>> getContactsUsingGETAsync(final ServiceCallback<List<Contacts>> serviceCallback);

    /**
     * Kontaktide nimekiri.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Contacts&gt; object
     */
    Observable<List<Contacts>> getContactsUsingGETAsync();

    /**
     * Kontaktide nimekiri.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Contacts&gt; object
     */
    Observable<ServiceResponse<List<Contacts>>> getContactsUsingGETWithServiceResponseAsync();
    /**
     * Kontaktide nimekiri.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Contacts&gt; object if successful.
     */
    List<Contacts> getContactsUsingGET(String lang);

    /**
     * Kontaktide nimekiri.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Contacts>> getContactsUsingGETAsync(String lang, final ServiceCallback<List<Contacts>> serviceCallback);

    /**
     * Kontaktide nimekiri.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Contacts&gt; object
     */
    Observable<List<Contacts>> getContactsUsingGETAsync(String lang);

    /**
     * Kontaktide nimekiri.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Contacts&gt; object
     */
    Observable<ServiceResponse<List<Contacts>>> getContactsUsingGETWithServiceResponseAsync(String lang);

    /**
     * Detailid.
     *
     * @param uuid Kasutaja UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserDetails object if successful.
     */
    UserDetails getUserDetailsUsingGET(String uuid);

    /**
     * Detailid.
     *
     * @param uuid Kasutaja UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UserDetails> getUserDetailsUsingGETAsync(String uuid, final ServiceCallback<UserDetails> serviceCallback);

    /**
     * Detailid.
     *
     * @param uuid Kasutaja UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserDetails object
     */
    Observable<UserDetails> getUserDetailsUsingGETAsync(String uuid);

    /**
     * Detailid.
     *
     * @param uuid Kasutaja UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserDetails object
     */
    Observable<ServiceResponse<UserDetails>> getUserDetailsUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Detailid.
     *
     * @param uuid Kasutaja UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserDetails object if successful.
     */
    UserDetails getUserDetailsUsingGET(String uuid, String lang);

    /**
     * Detailid.
     *
     * @param uuid Kasutaja UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UserDetails> getUserDetailsUsingGETAsync(String uuid, String lang, final ServiceCallback<UserDetails> serviceCallback);

    /**
     * Detailid.
     *
     * @param uuid Kasutaja UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserDetails object
     */
    Observable<UserDetails> getUserDetailsUsingGETAsync(String uuid, String lang);

    /**
     * Detailid.
     *
     * @param uuid Kasutaja UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserDetails object
     */
    Observable<ServiceResponse<UserDetails>> getUserDetailsUsingGETWithServiceResponseAsync(String uuid, String lang);

    /**
     * Dokumentide otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfDocument object if successful.
     */
    PagedResourcesOfDocument findDocumentsUsingGET();

    /**
     * Dokumentide otsing.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfDocument> findDocumentsUsingGETAsync(final ServiceCallback<PagedResourcesOfDocument> serviceCallback);

    /**
     * Dokumentide otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfDocument object
     */
    Observable<PagedResourcesOfDocument> findDocumentsUsingGETAsync();

    /**
     * Dokumentide otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfDocument object
     */
    Observable<ServiceResponse<PagedResourcesOfDocument>> findDocumentsUsingGETWithServiceResponseAsync();
    /**
     * Dokumentide otsing.
     *
     * @param authorReference [Kiri] Autori viit
     * @param createdEnd Loomiskuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param createdStart Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param directionCode [Kiri] Suund (klassifikaator 'kirjaSuund'). Possible values include: 'SISEMINE', 'SISSE', 'VALJA'
     * @param documentType Dokumendi liik. Possible values include: 'yldine', 'lugemiseTekst', 'muudatusettepanek', 'muudatusettepanekugaLiitumine', 'meLoetelu', 'plenaryAgendaItemDocument', 'unitAgendaItemDocument', 'infoAgendaItemDocument', 'interpellationsAgendaItemDocument', 'algtekst', 'lopptekst', 'seletuskiri', 'protokoll', 'interpellationsDocument', 'interpellationsAnswerDocument', 'opinionDocument', 'applicationDocument', 'excursionDocument', 'translationDocument', 'writtenQuestionDocument', 'writtenQuestionAnswerDocument', 'letterDocument', 'directiveDocument', 'pressReleaseDocument', 'decisionDocument', 'otherQuestionDocument', 'officialJourneyDocument', 'orderDocument', 'orderImplementationDocument', 'contractDocument', 'pursueDocument', 'elDocument', 'commissionOpinionDocument', 'vabariigiPresidendiOtsus', 'lisadokumendid', 'aruanne', 'taiskoguToonadalaProtokoll', 'riigikoguSeisukoht', 'uuring', 'meAllkirjastamine', 'jobDescriptionDocument', 'collectiveAddressDocument'
     * @param functionUuid Funktsiooni UUID
     * @param letterAuthor [Kiri] Autor
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param reference Viit
     * @param seriesUuid Sarja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subseriesUuid Alamsarja UUID
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfDocument object if successful.
     */
    PagedResourcesOfDocument findDocumentsUsingGET(String authorReference, LocalDate createdEnd, LocalDate createdStart, String directionCode, String documentType, String functionUuid, String letterAuthor, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String reference, String seriesUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String subseriesUuid, String title, Boolean unpaged);

    /**
     * Dokumentide otsing.
     *
     * @param authorReference [Kiri] Autori viit
     * @param createdEnd Loomiskuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param createdStart Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param directionCode [Kiri] Suund (klassifikaator 'kirjaSuund'). Possible values include: 'SISEMINE', 'SISSE', 'VALJA'
     * @param documentType Dokumendi liik. Possible values include: 'yldine', 'lugemiseTekst', 'muudatusettepanek', 'muudatusettepanekugaLiitumine', 'meLoetelu', 'plenaryAgendaItemDocument', 'unitAgendaItemDocument', 'infoAgendaItemDocument', 'interpellationsAgendaItemDocument', 'algtekst', 'lopptekst', 'seletuskiri', 'protokoll', 'interpellationsDocument', 'interpellationsAnswerDocument', 'opinionDocument', 'applicationDocument', 'excursionDocument', 'translationDocument', 'writtenQuestionDocument', 'writtenQuestionAnswerDocument', 'letterDocument', 'directiveDocument', 'pressReleaseDocument', 'decisionDocument', 'otherQuestionDocument', 'officialJourneyDocument', 'orderDocument', 'orderImplementationDocument', 'contractDocument', 'pursueDocument', 'elDocument', 'commissionOpinionDocument', 'vabariigiPresidendiOtsus', 'lisadokumendid', 'aruanne', 'taiskoguToonadalaProtokoll', 'riigikoguSeisukoht', 'uuring', 'meAllkirjastamine', 'jobDescriptionDocument', 'collectiveAddressDocument'
     * @param functionUuid Funktsiooni UUID
     * @param letterAuthor [Kiri] Autor
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param reference Viit
     * @param seriesUuid Sarja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subseriesUuid Alamsarja UUID
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfDocument> findDocumentsUsingGETAsync(String authorReference, LocalDate createdEnd, LocalDate createdStart, String directionCode, String documentType, String functionUuid, String letterAuthor, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String reference, String seriesUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String subseriesUuid, String title, Boolean unpaged, final ServiceCallback<PagedResourcesOfDocument> serviceCallback);

    /**
     * Dokumentide otsing.
     *
     * @param authorReference [Kiri] Autori viit
     * @param createdEnd Loomiskuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param createdStart Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param directionCode [Kiri] Suund (klassifikaator 'kirjaSuund'). Possible values include: 'SISEMINE', 'SISSE', 'VALJA'
     * @param documentType Dokumendi liik. Possible values include: 'yldine', 'lugemiseTekst', 'muudatusettepanek', 'muudatusettepanekugaLiitumine', 'meLoetelu', 'plenaryAgendaItemDocument', 'unitAgendaItemDocument', 'infoAgendaItemDocument', 'interpellationsAgendaItemDocument', 'algtekst', 'lopptekst', 'seletuskiri', 'protokoll', 'interpellationsDocument', 'interpellationsAnswerDocument', 'opinionDocument', 'applicationDocument', 'excursionDocument', 'translationDocument', 'writtenQuestionDocument', 'writtenQuestionAnswerDocument', 'letterDocument', 'directiveDocument', 'pressReleaseDocument', 'decisionDocument', 'otherQuestionDocument', 'officialJourneyDocument', 'orderDocument', 'orderImplementationDocument', 'contractDocument', 'pursueDocument', 'elDocument', 'commissionOpinionDocument', 'vabariigiPresidendiOtsus', 'lisadokumendid', 'aruanne', 'taiskoguToonadalaProtokoll', 'riigikoguSeisukoht', 'uuring', 'meAllkirjastamine', 'jobDescriptionDocument', 'collectiveAddressDocument'
     * @param functionUuid Funktsiooni UUID
     * @param letterAuthor [Kiri] Autor
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param reference Viit
     * @param seriesUuid Sarja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subseriesUuid Alamsarja UUID
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfDocument object
     */
    Observable<PagedResourcesOfDocument> findDocumentsUsingGETAsync(String authorReference, LocalDate createdEnd, LocalDate createdStart, String directionCode, String documentType, String functionUuid, String letterAuthor, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String reference, String seriesUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String subseriesUuid, String title, Boolean unpaged);

    /**
     * Dokumentide otsing.
     *
     * @param authorReference [Kiri] Autori viit
     * @param createdEnd Loomiskuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param createdStart Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param directionCode [Kiri] Suund (klassifikaator 'kirjaSuund'). Possible values include: 'SISEMINE', 'SISSE', 'VALJA'
     * @param documentType Dokumendi liik. Possible values include: 'yldine', 'lugemiseTekst', 'muudatusettepanek', 'muudatusettepanekugaLiitumine', 'meLoetelu', 'plenaryAgendaItemDocument', 'unitAgendaItemDocument', 'infoAgendaItemDocument', 'interpellationsAgendaItemDocument', 'algtekst', 'lopptekst', 'seletuskiri', 'protokoll', 'interpellationsDocument', 'interpellationsAnswerDocument', 'opinionDocument', 'applicationDocument', 'excursionDocument', 'translationDocument', 'writtenQuestionDocument', 'writtenQuestionAnswerDocument', 'letterDocument', 'directiveDocument', 'pressReleaseDocument', 'decisionDocument', 'otherQuestionDocument', 'officialJourneyDocument', 'orderDocument', 'orderImplementationDocument', 'contractDocument', 'pursueDocument', 'elDocument', 'commissionOpinionDocument', 'vabariigiPresidendiOtsus', 'lisadokumendid', 'aruanne', 'taiskoguToonadalaProtokoll', 'riigikoguSeisukoht', 'uuring', 'meAllkirjastamine', 'jobDescriptionDocument', 'collectiveAddressDocument'
     * @param functionUuid Funktsiooni UUID
     * @param letterAuthor [Kiri] Autor
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param reference Viit
     * @param seriesUuid Sarja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subseriesUuid Alamsarja UUID
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfDocument object
     */
    Observable<ServiceResponse<PagedResourcesOfDocument>> findDocumentsUsingGETWithServiceResponseAsync(String authorReference, LocalDate createdEnd, LocalDate createdStart, String directionCode, String documentType, String functionUuid, String letterAuthor, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String reference, String seriesUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String subseriesUuid, String title, Boolean unpaged);

    /**
     * Kollektiivsed pöördumised.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CollectiveAddress&gt; object if successful.
     */
    List<CollectiveAddress> findCollectiveAddressesUsingGET();

    /**
     * Kollektiivsed pöördumised.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<CollectiveAddress>> findCollectiveAddressesUsingGETAsync(final ServiceCallback<List<CollectiveAddress>> serviceCallback);

    /**
     * Kollektiivsed pöördumised.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CollectiveAddress&gt; object
     */
    Observable<List<CollectiveAddress>> findCollectiveAddressesUsingGETAsync();

    /**
     * Kollektiivsed pöördumised.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CollectiveAddress&gt; object
     */
    Observable<ServiceResponse<List<CollectiveAddress>>> findCollectiveAddressesUsingGETWithServiceResponseAsync();

    /**
     * Kollektiivse pöördumise detailid.
     *
     * @param uuidOrSenderRef Dokumendi UUID või saatja viit
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CollectiveAddress object if successful.
     */
    CollectiveAddress findCollectiveAddressUsingGET(String uuidOrSenderRef);

    /**
     * Kollektiivse pöördumise detailid.
     *
     * @param uuidOrSenderRef Dokumendi UUID või saatja viit
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CollectiveAddress> findCollectiveAddressUsingGETAsync(String uuidOrSenderRef, final ServiceCallback<CollectiveAddress> serviceCallback);

    /**
     * Kollektiivse pöördumise detailid.
     *
     * @param uuidOrSenderRef Dokumendi UUID või saatja viit
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CollectiveAddress object
     */
    Observable<CollectiveAddress> findCollectiveAddressUsingGETAsync(String uuidOrSenderRef);

    /**
     * Kollektiivse pöördumise detailid.
     *
     * @param uuidOrSenderRef Dokumendi UUID või saatja viit
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CollectiveAddress object
     */
    Observable<ServiceResponse<CollectiveAddress>> findCollectiveAddressUsingGETWithServiceResponseAsync(String uuidOrSenderRef);

    /**
     * Muud küsimused.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfOtherQuestions object if successful.
     */
    PagedResourcesOfOtherQuestions findOtherQuestionsUsingGET();

    /**
     * Muud küsimused.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfOtherQuestions> findOtherQuestionsUsingGETAsync(final ServiceCallback<PagedResourcesOfOtherQuestions> serviceCallback);

    /**
     * Muud küsimused.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfOtherQuestions object
     */
    Observable<PagedResourcesOfOtherQuestions> findOtherQuestionsUsingGETAsync();

    /**
     * Muud küsimused.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfOtherQuestions object
     */
    Observable<ServiceResponse<PagedResourcesOfOtherQuestions>> findOtherQuestionsUsingGETWithServiceResponseAsync();
    /**
     * Muud küsimused.
     *
     * @param applicantUuid Esitaja UUID
     * @param createdEnd Loomise lõppkuupäev (yyyy-MM-dd)
     * @param createdStart Loomise alguskuupäev (yyyy-MM-dd)
     * @param dateEnd Dokumendi kuupäeva lõpp (yyyy-MM-dd)
     * @param dateStart Dokumendi kuupäeva algus (yyyy-MM-dd)
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid?
     * @param reference Viit
     * @param reporterUuid Ettekandja UUID
     * @param sittingDateTimeEnd Seotud täiskogu istungi kuupäeva lõpp (yyyy-MM-dd)
     * @param sittingDateTimeStart Seotud täiskogu istungi kuupäeva algus (yyyy-MM-dd)
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subTypeCode Alamtüübi kood. Lubatud mitu väärtust.
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfOtherQuestions object if successful.
     */
    PagedResourcesOfOtherQuestions findOtherQuestionsUsingGET(String applicantUuid, LocalDate createdEnd, LocalDate createdStart, LocalDate dateEnd, LocalDate dateStart, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Boolean querySteno, String reference, String reporterUuid, LocalDate sittingDateTimeEnd, LocalDate sittingDateTimeStart, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, List<String> subTypeCode, String title, Boolean unpaged);

    /**
     * Muud küsimused.
     *
     * @param applicantUuid Esitaja UUID
     * @param createdEnd Loomise lõppkuupäev (yyyy-MM-dd)
     * @param createdStart Loomise alguskuupäev (yyyy-MM-dd)
     * @param dateEnd Dokumendi kuupäeva lõpp (yyyy-MM-dd)
     * @param dateStart Dokumendi kuupäeva algus (yyyy-MM-dd)
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid?
     * @param reference Viit
     * @param reporterUuid Ettekandja UUID
     * @param sittingDateTimeEnd Seotud täiskogu istungi kuupäeva lõpp (yyyy-MM-dd)
     * @param sittingDateTimeStart Seotud täiskogu istungi kuupäeva algus (yyyy-MM-dd)
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subTypeCode Alamtüübi kood. Lubatud mitu väärtust.
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfOtherQuestions> findOtherQuestionsUsingGETAsync(String applicantUuid, LocalDate createdEnd, LocalDate createdStart, LocalDate dateEnd, LocalDate dateStart, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Boolean querySteno, String reference, String reporterUuid, LocalDate sittingDateTimeEnd, LocalDate sittingDateTimeStart, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, List<String> subTypeCode, String title, Boolean unpaged, final ServiceCallback<PagedResourcesOfOtherQuestions> serviceCallback);

    /**
     * Muud küsimused.
     *
     * @param applicantUuid Esitaja UUID
     * @param createdEnd Loomise lõppkuupäev (yyyy-MM-dd)
     * @param createdStart Loomise alguskuupäev (yyyy-MM-dd)
     * @param dateEnd Dokumendi kuupäeva lõpp (yyyy-MM-dd)
     * @param dateStart Dokumendi kuupäeva algus (yyyy-MM-dd)
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid?
     * @param reference Viit
     * @param reporterUuid Ettekandja UUID
     * @param sittingDateTimeEnd Seotud täiskogu istungi kuupäeva lõpp (yyyy-MM-dd)
     * @param sittingDateTimeStart Seotud täiskogu istungi kuupäeva algus (yyyy-MM-dd)
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subTypeCode Alamtüübi kood. Lubatud mitu väärtust.
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfOtherQuestions object
     */
    Observable<PagedResourcesOfOtherQuestions> findOtherQuestionsUsingGETAsync(String applicantUuid, LocalDate createdEnd, LocalDate createdStart, LocalDate dateEnd, LocalDate dateStart, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Boolean querySteno, String reference, String reporterUuid, LocalDate sittingDateTimeEnd, LocalDate sittingDateTimeStart, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, List<String> subTypeCode, String title, Boolean unpaged);

    /**
     * Muud küsimused.
     *
     * @param applicantUuid Esitaja UUID
     * @param createdEnd Loomise lõppkuupäev (yyyy-MM-dd)
     * @param createdStart Loomise alguskuupäev (yyyy-MM-dd)
     * @param dateEnd Dokumendi kuupäeva lõpp (yyyy-MM-dd)
     * @param dateStart Dokumendi kuupäeva algus (yyyy-MM-dd)
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid?
     * @param reference Viit
     * @param reporterUuid Ettekandja UUID
     * @param sittingDateTimeEnd Seotud täiskogu istungi kuupäeva lõpp (yyyy-MM-dd)
     * @param sittingDateTimeStart Seotud täiskogu istungi kuupäeva algus (yyyy-MM-dd)
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subTypeCode Alamtüübi kood. Lubatud mitu väärtust.
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfOtherQuestions object
     */
    Observable<ServiceResponse<PagedResourcesOfOtherQuestions>> findOtherQuestionsUsingGETWithServiceResponseAsync(String applicantUuid, LocalDate createdEnd, LocalDate createdStart, LocalDate dateEnd, LocalDate dateStart, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Boolean querySteno, String reference, String reporterUuid, LocalDate sittingDateTimeEnd, LocalDate sittingDateTimeStart, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, List<String> subTypeCode, String title, Boolean unpaged);

    /**
     * Dokumendi detailid.
     *
     * @param uuid Dokumendi UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Document object if successful.
     */
    Document getDocumentUsingGET(String uuid);

    /**
     * Dokumendi detailid.
     *
     * @param uuid Dokumendi UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Document> getDocumentUsingGETAsync(String uuid, final ServiceCallback<Document> serviceCallback);

    /**
     * Dokumendi detailid.
     *
     * @param uuid Dokumendi UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Document object
     */
    Observable<Document> getDocumentUsingGETAsync(String uuid);

    /**
     * Dokumendi detailid.
     *
     * @param uuid Dokumendi UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Document object
     */
    Observable<ServiceResponse<Document>> getDocumentUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Dokumendi detailid.
     *
     * @param uuid Dokumendi UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Document object if successful.
     */
    Document getDocumentUsingGET(String uuid, String lang);

    /**
     * Dokumendi detailid.
     *
     * @param uuid Dokumendi UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Document> getDocumentUsingGETAsync(String uuid, String lang, final ServiceCallback<Document> serviceCallback);

    /**
     * Dokumendi detailid.
     *
     * @param uuid Dokumendi UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Document object
     */
    Observable<Document> getDocumentUsingGETAsync(String uuid, String lang);

    /**
     * Dokumendi detailid.
     *
     * @param uuid Dokumendi UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Document object
     */
    Observable<ServiceResponse<Document>> getDocumentUsingGETWithServiceResponseAsync(String uuid, String lang);

    /**
     * Täiskogu ja komisjonide päevakorrad, Riigikogu liikmete lähetused ja visiidid.
     * Sündmusi saab pärida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Events&gt; object if successful.
     */
    List<Events> getEventsUsingGET();

    /**
     * Täiskogu ja komisjonide päevakorrad, Riigikogu liikmete lähetused ja visiidid.
     * Sündmusi saab pärida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Events>> getEventsUsingGETAsync(final ServiceCallback<List<Events>> serviceCallback);

    /**
     * Täiskogu ja komisjonide päevakorrad, Riigikogu liikmete lähetused ja visiidid.
     * Sündmusi saab pärida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Events&gt; object
     */
    Observable<List<Events>> getEventsUsingGETAsync();

    /**
     * Täiskogu ja komisjonide päevakorrad, Riigikogu liikmete lähetused ja visiidid.
     * Sündmusi saab pärida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Events&gt; object
     */
    Observable<ServiceResponse<List<Events>>> getEventsUsingGETWithServiceResponseAsync();
    /**
     * Täiskogu ja komisjonide päevakorrad, Riigikogu liikmete lähetused ja visiidid.
     * Sündmusi saab pärida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param dateParameter Kuupäev nädalas, mille sündmusi soovitakse
     * @param endDate Kuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid?
     * @param startDate Kuupäeva vahemiku algus (yyyy-MM-dd)
     * @param type Sündmuse tüüp. Tühja korral kõik. Possible values include: 'PLENARY', 'COMMITTEE', 'SECONDMENTS', 'VISITS'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Events&gt; object if successful.
     */
    List<Events> getEventsUsingGET(LocalDate dateParameter, LocalDate endDate, String lang, Boolean querySteno, LocalDate startDate, String type);

    /**
     * Täiskogu ja komisjonide päevakorrad, Riigikogu liikmete lähetused ja visiidid.
     * Sündmusi saab pärida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param dateParameter Kuupäev nädalas, mille sündmusi soovitakse
     * @param endDate Kuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid?
     * @param startDate Kuupäeva vahemiku algus (yyyy-MM-dd)
     * @param type Sündmuse tüüp. Tühja korral kõik. Possible values include: 'PLENARY', 'COMMITTEE', 'SECONDMENTS', 'VISITS'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Events>> getEventsUsingGETAsync(LocalDate dateParameter, LocalDate endDate, String lang, Boolean querySteno, LocalDate startDate, String type, final ServiceCallback<List<Events>> serviceCallback);

    /**
     * Täiskogu ja komisjonide päevakorrad, Riigikogu liikmete lähetused ja visiidid.
     * Sündmusi saab pärida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param dateParameter Kuupäev nädalas, mille sündmusi soovitakse
     * @param endDate Kuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid?
     * @param startDate Kuupäeva vahemiku algus (yyyy-MM-dd)
     * @param type Sündmuse tüüp. Tühja korral kõik. Possible values include: 'PLENARY', 'COMMITTEE', 'SECONDMENTS', 'VISITS'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Events&gt; object
     */
    Observable<List<Events>> getEventsUsingGETAsync(LocalDate dateParameter, LocalDate endDate, String lang, Boolean querySteno, LocalDate startDate, String type);

    /**
     * Täiskogu ja komisjonide päevakorrad, Riigikogu liikmete lähetused ja visiidid.
     * Sündmusi saab pärida ühe nädala või suvalise ajavahemiku kohta, täites vastavalt 'date' või 'startDate/endDate' parameetrid.
     *
     * @param dateParameter Kuupäev nädalas, mille sündmusi soovitakse
     * @param endDate Kuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid?
     * @param startDate Kuupäeva vahemiku algus (yyyy-MM-dd)
     * @param type Sündmuse tüüp. Tühja korral kõik. Possible values include: 'PLENARY', 'COMMITTEE', 'SECONDMENTS', 'VISITS'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Events&gt; object
     */
    Observable<ServiceResponse<List<Events>>> getEventsUsingGETWithServiceResponseAsync(LocalDate dateParameter, LocalDate endDate, String lang, Boolean querySteno, LocalDate startDate, String type);

    /**
     * Kuupäevad, millal mõni sündmus on toimunud.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventCalendar&gt; object if successful.
     */
    List<EventCalendar> getEventCalendarUsingGET(LocalDate endDate, LocalDate startDate);

    /**
     * Kuupäevad, millal mõni sündmus on toimunud.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<EventCalendar>> getEventCalendarUsingGETAsync(LocalDate endDate, LocalDate startDate, final ServiceCallback<List<EventCalendar>> serviceCallback);

    /**
     * Kuupäevad, millal mõni sündmus on toimunud.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventCalendar&gt; object
     */
    Observable<List<EventCalendar>> getEventCalendarUsingGETAsync(LocalDate endDate, LocalDate startDate);

    /**
     * Kuupäevad, millal mõni sündmus on toimunud.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventCalendar&gt; object
     */
    Observable<ServiceResponse<List<EventCalendar>>> getEventCalendarUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate);
    /**
     * Kuupäevad, millal mõni sündmus on toimunud.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param committeeGroupUuid Komisjoni UUID, mille päevakorra sündmusi soovitakse. Asjakohane kui "type=committee"
     * @param type Sündmuse tüüp. Tühja korral kõik. Possible values include: 'PLENARY', 'COMMITTEE', 'SECONDMENTS', 'VISITS'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventCalendar&gt; object if successful.
     */
    List<EventCalendar> getEventCalendarUsingGET(LocalDate endDate, LocalDate startDate, String committeeGroupUuid, String type);

    /**
     * Kuupäevad, millal mõni sündmus on toimunud.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param committeeGroupUuid Komisjoni UUID, mille päevakorra sündmusi soovitakse. Asjakohane kui "type=committee"
     * @param type Sündmuse tüüp. Tühja korral kõik. Possible values include: 'PLENARY', 'COMMITTEE', 'SECONDMENTS', 'VISITS'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<EventCalendar>> getEventCalendarUsingGETAsync(LocalDate endDate, LocalDate startDate, String committeeGroupUuid, String type, final ServiceCallback<List<EventCalendar>> serviceCallback);

    /**
     * Kuupäevad, millal mõni sündmus on toimunud.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param committeeGroupUuid Komisjoni UUID, mille päevakorra sündmusi soovitakse. Asjakohane kui "type=committee"
     * @param type Sündmuse tüüp. Tühja korral kõik. Possible values include: 'PLENARY', 'COMMITTEE', 'SECONDMENTS', 'VISITS'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventCalendar&gt; object
     */
    Observable<List<EventCalendar>> getEventCalendarUsingGETAsync(LocalDate endDate, LocalDate startDate, String committeeGroupUuid, String type);

    /**
     * Kuupäevad, millal mõni sündmus on toimunud.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param committeeGroupUuid Komisjoni UUID, mille päevakorra sündmusi soovitakse. Asjakohane kui "type=committee"
     * @param type Sündmuse tüüp. Tühja korral kõik. Possible values include: 'PLENARY', 'COMMITTEE', 'SECONDMENTS', 'VISITS'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventCalendar&gt; object
     */
    Observable<ServiceResponse<List<EventCalendar>>> getEventCalendarUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String committeeGroupUuid, String type);

    /**
     * Faili metaandmed.
     *
     * @param uuid Faili UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FileMetadata object if successful.
     */
    FileMetadata getFileMetadataUsingGET(String uuid);

    /**
     * Faili metaandmed.
     *
     * @param uuid Faili UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FileMetadata> getFileMetadataUsingGETAsync(String uuid, final ServiceCallback<FileMetadata> serviceCallback);

    /**
     * Faili metaandmed.
     *
     * @param uuid Faili UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileMetadata object
     */
    Observable<FileMetadata> getFileMetadataUsingGETAsync(String uuid);

    /**
     * Faili metaandmed.
     *
     * @param uuid Faili UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileMetadata object
     */
    Observable<ServiceResponse<FileMetadata>> getFileMetadataUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Faili metaandmed.
     *
     * @param uuid Faili UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FileMetadata object if successful.
     */
    FileMetadata getFileMetadataUsingGET(String uuid, String lang);

    /**
     * Faili metaandmed.
     *
     * @param uuid Faili UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FileMetadata> getFileMetadataUsingGETAsync(String uuid, String lang, final ServiceCallback<FileMetadata> serviceCallback);

    /**
     * Faili metaandmed.
     *
     * @param uuid Faili UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileMetadata object
     */
    Observable<FileMetadata> getFileMetadataUsingGETAsync(String uuid, String lang);

    /**
     * Faili metaandmed.
     *
     * @param uuid Faili UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileMetadata object
     */
    Observable<ServiceResponse<FileMetadata>> getFileMetadataUsingGETWithServiceResponseAsync(String uuid, String lang);

    /**
     * Faili allalaadimine.
     *
     * @param uuid Faili UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the byte[] object if successful.
     */
    byte[] downloadFileUsingGET(String uuid);

    /**
     * Faili allalaadimine.
     *
     * @param uuid Faili UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<byte[]> downloadFileUsingGETAsync(String uuid, final ServiceCallback<byte[]> serviceCallback);

    /**
     * Faili allalaadimine.
     *
     * @param uuid Faili UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the byte[] object
     */
    Observable<byte[]> downloadFileUsingGETAsync(String uuid);

    /**
     * Faili allalaadimine.
     *
     * @param uuid Faili UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the byte[] object
     */
    Observable<ServiceResponse<byte[]>> downloadFileUsingGETWithServiceResponseAsync(String uuid);

    /**
     * Saaliplaan.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Hallplan&gt; object if successful.
     */
    List<Hallplan> getLatestHallplanUsingGET();

    /**
     * Saaliplaan.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Hallplan>> getLatestHallplanUsingGETAsync(final ServiceCallback<List<Hallplan>> serviceCallback);

    /**
     * Saaliplaan.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Hallplan&gt; object
     */
    Observable<List<Hallplan>> getLatestHallplanUsingGETAsync();

    /**
     * Saaliplaan.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Hallplan&gt; object
     */
    Observable<ServiceResponse<List<Hallplan>>> getLatestHallplanUsingGETWithServiceResponseAsync();
    /**
     * Saaliplaan.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Hallplan&gt; object if successful.
     */
    List<Hallplan> getLatestHallplanUsingGET(String lang);

    /**
     * Saaliplaan.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Hallplan>> getLatestHallplanUsingGETAsync(String lang, final ServiceCallback<List<Hallplan>> serviceCallback);

    /**
     * Saaliplaan.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Hallplan&gt; object
     */
    Observable<List<Hallplan>> getLatestHallplanUsingGETAsync(String lang);

    /**
     * Saaliplaan.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Hallplan&gt; object
     */
    Observable<ServiceResponse<List<Hallplan>>> getLatestHallplanUsingGETWithServiceResponseAsync(String lang);

    /**
     * Dokumendipuu (hierarhia).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DocumentTree&gt; object if successful.
     */
    List<DocumentTree> getDocumentTreeUsingGET();

    /**
     * Dokumendipuu (hierarhia).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<DocumentTree>> getDocumentTreeUsingGETAsync(final ServiceCallback<List<DocumentTree>> serviceCallback);

    /**
     * Dokumendipuu (hierarhia).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DocumentTree&gt; object
     */
    Observable<List<DocumentTree>> getDocumentTreeUsingGETAsync();

    /**
     * Dokumendipuu (hierarhia).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DocumentTree&gt; object
     */
    Observable<ServiceResponse<List<DocumentTree>>> getDocumentTreeUsingGETWithServiceResponseAsync();

    /**
     * Dokumendi liigid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DocumentTypes&gt; object if successful.
     */
    List<DocumentTypes> getDocumentTypesUsingGET();

    /**
     * Dokumendi liigid.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<DocumentTypes>> getDocumentTypesUsingGETAsync(final ServiceCallback<List<DocumentTypes>> serviceCallback);

    /**
     * Dokumendi liigid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DocumentTypes&gt; object
     */
    Observable<List<DocumentTypes>> getDocumentTypesUsingGETAsync();

    /**
     * Dokumendi liigid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DocumentTypes&gt; object
     */
    Observable<ServiceResponse<List<DocumentTypes>>> getDocumentTypesUsingGETWithServiceResponseAsync();

    /**
     * Eelnõu algatajad.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DraftInitiators&gt; object if successful.
     */
    List<DraftInitiators> getDraftInitiatorsUsingGET();

    /**
     * Eelnõu algatajad.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<DraftInitiators>> getDraftInitiatorsUsingGETAsync(final ServiceCallback<List<DraftInitiators>> serviceCallback);

    /**
     * Eelnõu algatajad.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DraftInitiators&gt; object
     */
    Observable<List<DraftInitiators>> getDraftInitiatorsUsingGETAsync();

    /**
     * Eelnõu algatajad.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DraftInitiators&gt; object
     */
    Observable<ServiceResponse<List<DraftInitiators>>> getDraftInitiatorsUsingGETWithServiceResponseAsync();

    /**
     * Toimiku liigid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;VolumeTypes&gt; object if successful.
     */
    List<VolumeTypes> getVolumeTypesUsingGET();

    /**
     * Toimiku liigid.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<VolumeTypes>> getVolumeTypesUsingGETAsync(final ServiceCallback<List<VolumeTypes>> serviceCallback);

    /**
     * Toimiku liigid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;VolumeTypes&gt; object
     */
    Observable<List<VolumeTypes>> getVolumeTypesUsingGETAsync();

    /**
     * Toimiku liigid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;VolumeTypes&gt; object
     */
    Observable<ServiceResponse<List<VolumeTypes>>> getVolumeTypesUsingGETWithServiceResponseAsync();

    /**
     * Kõik koosseisud.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Membership&gt; object if successful.
     */
    List<Membership> getMembershipsUsingGET();

    /**
     * Kõik koosseisud.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Membership>> getMembershipsUsingGETAsync(final ServiceCallback<List<Membership>> serviceCallback);

    /**
     * Kõik koosseisud.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Membership&gt; object
     */
    Observable<List<Membership>> getMembershipsUsingGETAsync();

    /**
     * Kõik koosseisud.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Membership&gt; object
     */
    Observable<ServiceResponse<List<Membership>>> getMembershipsUsingGETWithServiceResponseAsync();

    /**
     * Praegune koosseis.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Membership object if successful.
     */
    Membership getCurrentMembershipUsingGET();

    /**
     * Praegune koosseis.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Membership> getCurrentMembershipUsingGETAsync(final ServiceCallback<Membership> serviceCallback);

    /**
     * Praegune koosseis.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Membership object
     */
    Observable<Membership> getCurrentMembershipUsingGETAsync();

    /**
     * Praegune koosseis.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Membership object
     */
    Observable<ServiceResponse<Membership>> getCurrentMembershipUsingGETWithServiceResponseAsync();

    /**
     * Koosseis.
     *
     * @param number Koosseisu number
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Membership object if successful.
     */
    Membership getMembershipUsingGET(int number);

    /**
     * Koosseis.
     *
     * @param number Koosseisu number
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Membership> getMembershipUsingGETAsync(int number, final ServiceCallback<Membership> serviceCallback);

    /**
     * Koosseis.
     *
     * @param number Koosseisu number
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Membership object
     */
    Observable<Membership> getMembershipUsingGETAsync(int number);

    /**
     * Koosseis.
     *
     * @param number Koosseisu number
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Membership object
     */
    Observable<ServiceResponse<Membership>> getMembershipUsingGETWithServiceResponseAsync(int number);

    /**
     * Riigikogu liikmete nimekiri / otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PlenaryMember&gt; object if successful.
     */
    List<PlenaryMember> getPlenaryMembersUsingGET();

    /**
     * Riigikogu liikmete nimekiri / otsing.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PlenaryMember>> getPlenaryMembersUsingGETAsync(final ServiceCallback<List<PlenaryMember>> serviceCallback);

    /**
     * Riigikogu liikmete nimekiri / otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMember&gt; object
     */
    Observable<List<PlenaryMember>> getPlenaryMembersUsingGETAsync();

    /**
     * Riigikogu liikmete nimekiri / otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMember&gt; object
     */
    Observable<ServiceResponse<List<PlenaryMember>>> getPlenaryMembersUsingGETWithServiceResponseAsync();
    /**
     * Riigikogu liikmete nimekiri / otsing.
     *
     * @param committeeUuid Komisjoni UUID. Lubatud mitu väärtust
     * @param electoralDistrictCodes Valimisringkonna kood (klassifikaator 'valimisringkond'). Lubatud mitu väärtust
     * @param factionUuid Fraktsiooni UUID. Lubatud mitu väärtust
     * @param includeInactive Kaasa mitteaktiivsed liikmed
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseis
     * @param name Liikme nimi. Otsitakse otsisõna sisaldumist nii ees- kui perekonnanimes
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PlenaryMember&gt; object if successful.
     */
    List<PlenaryMember> getPlenaryMembersUsingGET(List<String> committeeUuid, List<String> electoralDistrictCodes, List<String> factionUuid, Boolean includeInactive, String lang, Integer membership, String name);

    /**
     * Riigikogu liikmete nimekiri / otsing.
     *
     * @param committeeUuid Komisjoni UUID. Lubatud mitu väärtust
     * @param electoralDistrictCodes Valimisringkonna kood (klassifikaator 'valimisringkond'). Lubatud mitu väärtust
     * @param factionUuid Fraktsiooni UUID. Lubatud mitu väärtust
     * @param includeInactive Kaasa mitteaktiivsed liikmed
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseis
     * @param name Liikme nimi. Otsitakse otsisõna sisaldumist nii ees- kui perekonnanimes
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PlenaryMember>> getPlenaryMembersUsingGETAsync(List<String> committeeUuid, List<String> electoralDistrictCodes, List<String> factionUuid, Boolean includeInactive, String lang, Integer membership, String name, final ServiceCallback<List<PlenaryMember>> serviceCallback);

    /**
     * Riigikogu liikmete nimekiri / otsing.
     *
     * @param committeeUuid Komisjoni UUID. Lubatud mitu väärtust
     * @param electoralDistrictCodes Valimisringkonna kood (klassifikaator 'valimisringkond'). Lubatud mitu väärtust
     * @param factionUuid Fraktsiooni UUID. Lubatud mitu väärtust
     * @param includeInactive Kaasa mitteaktiivsed liikmed
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseis
     * @param name Liikme nimi. Otsitakse otsisõna sisaldumist nii ees- kui perekonnanimes
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMember&gt; object
     */
    Observable<List<PlenaryMember>> getPlenaryMembersUsingGETAsync(List<String> committeeUuid, List<String> electoralDistrictCodes, List<String> factionUuid, Boolean includeInactive, String lang, Integer membership, String name);

    /**
     * Riigikogu liikmete nimekiri / otsing.
     *
     * @param committeeUuid Komisjoni UUID. Lubatud mitu väärtust
     * @param electoralDistrictCodes Valimisringkonna kood (klassifikaator 'valimisringkond'). Lubatud mitu väärtust
     * @param factionUuid Fraktsiooni UUID. Lubatud mitu väärtust
     * @param includeInactive Kaasa mitteaktiivsed liikmed
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseis
     * @param name Liikme nimi. Otsitakse otsisõna sisaldumist nii ees- kui perekonnanimes
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMember&gt; object
     */
    Observable<ServiceResponse<List<PlenaryMember>>> getPlenaryMembersUsingGETWithServiceResponseAsync(List<String> committeeUuid, List<String> electoralDistrictCodes, List<String> factionUuid, Boolean includeInactive, String lang, Integer membership, String name);

    /**
     * Riigikogu liikme detailid.
     *
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PlenaryMemberDetails object if successful.
     */
    PlenaryMemberDetails getPlenaryMemberDetailsUsingGET(String uuid);

    /**
     * Riigikogu liikme detailid.
     *
     * @param uuid Liikme UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PlenaryMemberDetails> getPlenaryMemberDetailsUsingGETAsync(String uuid, final ServiceCallback<PlenaryMemberDetails> serviceCallback);

    /**
     * Riigikogu liikme detailid.
     *
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryMemberDetails object
     */
    Observable<PlenaryMemberDetails> getPlenaryMemberDetailsUsingGETAsync(String uuid);

    /**
     * Riigikogu liikme detailid.
     *
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryMemberDetails object
     */
    Observable<ServiceResponse<PlenaryMemberDetails>> getPlenaryMemberDetailsUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Riigikogu liikme detailid.
     *
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest liikme viimane kõne? (true/false)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PlenaryMemberDetails object if successful.
     */
    PlenaryMemberDetails getPlenaryMemberDetailsUsingGET(String uuid, String lang, Boolean querySteno);

    /**
     * Riigikogu liikme detailid.
     *
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest liikme viimane kõne? (true/false)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PlenaryMemberDetails> getPlenaryMemberDetailsUsingGETAsync(String uuid, String lang, Boolean querySteno, final ServiceCallback<PlenaryMemberDetails> serviceCallback);

    /**
     * Riigikogu liikme detailid.
     *
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest liikme viimane kõne? (true/false)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryMemberDetails object
     */
    Observable<PlenaryMemberDetails> getPlenaryMemberDetailsUsingGETAsync(String uuid, String lang, Boolean querySteno);

    /**
     * Riigikogu liikme detailid.
     *
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest liikme viimane kõne? (true/false)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryMemberDetails object
     */
    Observable<ServiceResponse<PlenaryMemberDetails>> getPlenaryMemberDetailsUsingGETWithServiceResponseAsync(String uuid, String lang, Boolean querySteno);

    /**
     * Istungjärkude nimekiri.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Session&gt; object if successful.
     */
    List<Session> getSessionsUsingGET();

    /**
     * Istungjärkude nimekiri.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Session>> getSessionsUsingGETAsync(final ServiceCallback<List<Session>> serviceCallback);

    /**
     * Istungjärkude nimekiri.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Session&gt; object
     */
    Observable<List<Session>> getSessionsUsingGETAsync();

    /**
     * Istungjärkude nimekiri.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Session&gt; object
     */
    Observable<ServiceResponse<List<Session>>> getSessionsUsingGETWithServiceResponseAsync();
    /**
     * Istungjärkude nimekiri.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Session&gt; object if successful.
     */
    List<Session> getSessionsUsingGET(String lang);

    /**
     * Istungjärkude nimekiri.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Session>> getSessionsUsingGETAsync(String lang, final ServiceCallback<List<Session>> serviceCallback);

    /**
     * Istungjärkude nimekiri.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Session&gt; object
     */
    Observable<List<Session>> getSessionsUsingGETAsync(String lang);

    /**
     * Istungjärkude nimekiri.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Session&gt; object
     */
    Observable<ServiceResponse<List<Session>>> getSessionsUsingGETWithServiceResponseAsync(String lang);

    /**
     * Praegune istungjärk.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Session object if successful.
     */
    Session getCurrentSessionUsingGET();

    /**
     * Praegune istungjärk.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Session> getCurrentSessionUsingGETAsync(final ServiceCallback<Session> serviceCallback);

    /**
     * Praegune istungjärk.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Session object
     */
    Observable<Session> getCurrentSessionUsingGETAsync();

    /**
     * Praegune istungjärk.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Session object
     */
    Observable<ServiceResponse<Session>> getCurrentSessionUsingGETWithServiceResponseAsync();
    /**
     * Praegune istungjärk.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Session object if successful.
     */
    Session getCurrentSessionUsingGET(String lang);

    /**
     * Praegune istungjärk.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Session> getCurrentSessionUsingGETAsync(String lang, final ServiceCallback<Session> serviceCallback);

    /**
     * Praegune istungjärk.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Session object
     */
    Observable<Session> getCurrentSessionUsingGETAsync(String lang);

    /**
     * Praegune istungjärk.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Session object
     */
    Observable<ServiceResponse<Session>> getCurrentSessionUsingGETWithServiceResponseAsync(String lang);

    /**
     * Fraktsiooni istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;MemberParticipation&gt; object if successful.
     */
    List<MemberParticipation> getFactionParticipationUsingGET(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Fraktsiooni istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<MemberParticipation>> getFactionParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, final ServiceCallback<List<MemberParticipation>> serviceCallback);

    /**
     * Fraktsiooni istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;MemberParticipation&gt; object
     */
    Observable<List<MemberParticipation>> getFactionParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Fraktsiooni istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;MemberParticipation&gt; object
     */
    Observable<ServiceResponse<List<MemberParticipation>>> getFactionParticipationUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid);
    /**
     * Fraktsiooni istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;MemberParticipation&gt; object if successful.
     */
    List<MemberParticipation> getFactionParticipationUsingGET(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Fraktsiooni istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<MemberParticipation>> getFactionParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang, final ServiceCallback<List<MemberParticipation>> serviceCallback);

    /**
     * Fraktsiooni istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;MemberParticipation&gt; object
     */
    Observable<List<MemberParticipation>> getFactionParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Fraktsiooni istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;MemberParticipation&gt; object
     */
    Observable<ServiceResponse<List<MemberParticipation>>> getFactionParticipationUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Riigikogu liikme istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MemberParticipation object if successful.
     */
    MemberParticipation getMemberParticipationUsingGET(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Riigikogu liikme istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<MemberParticipation> getMemberParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, final ServiceCallback<MemberParticipation> serviceCallback);

    /**
     * Riigikogu liikme istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MemberParticipation object
     */
    Observable<MemberParticipation> getMemberParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Riigikogu liikme istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MemberParticipation object
     */
    Observable<ServiceResponse<MemberParticipation>> getMemberParticipationUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid);
    /**
     * Riigikogu liikme istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param details details
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MemberParticipation object if successful.
     */
    MemberParticipation getMemberParticipationUsingGET(LocalDate endDate, LocalDate startDate, String uuid, Boolean details, String lang);

    /**
     * Riigikogu liikme istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param details details
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<MemberParticipation> getMemberParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, Boolean details, String lang, final ServiceCallback<MemberParticipation> serviceCallback);

    /**
     * Riigikogu liikme istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param details details
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MemberParticipation object
     */
    Observable<MemberParticipation> getMemberParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, Boolean details, String lang);

    /**
     * Riigikogu liikme istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param details details
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MemberParticipation object
     */
    Observable<ServiceResponse<MemberParticipation>> getMemberParticipationUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid, Boolean details, String lang);

    /**
     * Täiskogu istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;MemberParticipation&gt; object if successful.
     */
    List<MemberParticipation> getPlenaryParticipationUsingGET(LocalDate endDate, LocalDate startDate);

    /**
     * Täiskogu istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<MemberParticipation>> getPlenaryParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, final ServiceCallback<List<MemberParticipation>> serviceCallback);

    /**
     * Täiskogu istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;MemberParticipation&gt; object
     */
    Observable<List<MemberParticipation>> getPlenaryParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate);

    /**
     * Täiskogu istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;MemberParticipation&gt; object
     */
    Observable<ServiceResponse<List<MemberParticipation>>> getPlenaryParticipationUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate);
    /**
     * Täiskogu istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;MemberParticipation&gt; object if successful.
     */
    List<MemberParticipation> getPlenaryParticipationUsingGET(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Täiskogu istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<MemberParticipation>> getPlenaryParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String lang, final ServiceCallback<List<MemberParticipation>> serviceCallback);

    /**
     * Täiskogu istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;MemberParticipation&gt; object
     */
    Observable<List<MemberParticipation>> getPlenaryParticipationUsingGETAsync(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Täiskogu istungitest osavõtu statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;MemberParticipation&gt; object
     */
    Observable<ServiceResponse<List<MemberParticipation>>> getPlenaryParticipationUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Fraktsiooni sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;FactionSpeech&gt; object if successful.
     */
    List<FactionSpeech> getFactionSpeechStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Fraktsiooni sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<FactionSpeech>> getFactionSpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, final ServiceCallback<List<FactionSpeech>> serviceCallback);

    /**
     * Fraktsiooni sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FactionSpeech&gt; object
     */
    Observable<List<FactionSpeech>> getFactionSpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Fraktsiooni sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FactionSpeech&gt; object
     */
    Observable<ServiceResponse<List<FactionSpeech>>> getFactionSpeechStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid);
    /**
     * Fraktsiooni sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;FactionSpeech&gt; object if successful.
     */
    List<FactionSpeech> getFactionSpeechStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Fraktsiooni sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<FactionSpeech>> getFactionSpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang, final ServiceCallback<List<FactionSpeech>> serviceCallback);

    /**
     * Fraktsiooni sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FactionSpeech&gt; object
     */
    Observable<List<FactionSpeech>> getFactionSpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Fraktsiooni sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FactionSpeech&gt; object
     */
    Observable<ServiceResponse<List<FactionSpeech>>> getFactionSpeechStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Riigikogu liikme sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FactionSpeech object if successful.
     */
    FactionSpeech getMemberSpeechStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Riigikogu liikme sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FactionSpeech> getMemberSpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, final ServiceCallback<FactionSpeech> serviceCallback);

    /**
     * Riigikogu liikme sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FactionSpeech object
     */
    Observable<FactionSpeech> getMemberSpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Riigikogu liikme sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FactionSpeech object
     */
    Observable<ServiceResponse<FactionSpeech>> getMemberSpeechStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid);
    /**
     * Riigikogu liikme sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FactionSpeech object if successful.
     */
    FactionSpeech getMemberSpeechStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Riigikogu liikme sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FactionSpeech> getMemberSpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang, final ServiceCallback<FactionSpeech> serviceCallback);

    /**
     * Riigikogu liikme sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FactionSpeech object
     */
    Observable<FactionSpeech> getMemberSpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Riigikogu liikme sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FactionSpeech object
     */
    Observable<ServiceResponse<FactionSpeech>> getMemberSpeechStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Täiskogu sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;FactionSpeech&gt; object if successful.
     */
    List<FactionSpeech> getPlenarySpeechStatisticsUsingGET(LocalDate endDate, LocalDate startDate);

    /**
     * Täiskogu sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<FactionSpeech>> getPlenarySpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, final ServiceCallback<List<FactionSpeech>> serviceCallback);

    /**
     * Täiskogu sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FactionSpeech&gt; object
     */
    Observable<List<FactionSpeech>> getPlenarySpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate);

    /**
     * Täiskogu sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FactionSpeech&gt; object
     */
    Observable<ServiceResponse<List<FactionSpeech>>> getPlenarySpeechStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate);
    /**
     * Täiskogu sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;FactionSpeech&gt; object if successful.
     */
    List<FactionSpeech> getPlenarySpeechStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Täiskogu sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<FactionSpeech>> getPlenarySpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String lang, final ServiceCallback<List<FactionSpeech>> serviceCallback);

    /**
     * Täiskogu sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FactionSpeech&gt; object
     */
    Observable<List<FactionSpeech>> getPlenarySpeechStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Täiskogu sõnavõttude statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FactionSpeech&gt; object
     */
    Observable<ServiceResponse<List<FactionSpeech>>> getPlenarySpeechStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Fraktsiooni hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PlenaryMemberVoting&gt; object if successful.
     */
    List<PlenaryMemberVoting> getFactionVotingStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Fraktsiooni hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PlenaryMemberVoting>> getFactionVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, final ServiceCallback<List<PlenaryMemberVoting>> serviceCallback);

    /**
     * Fraktsiooni hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMemberVoting&gt; object
     */
    Observable<List<PlenaryMemberVoting>> getFactionVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Fraktsiooni hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMemberVoting&gt; object
     */
    Observable<ServiceResponse<List<PlenaryMemberVoting>>> getFactionVotingStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid);
    /**
     * Fraktsiooni hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PlenaryMemberVoting&gt; object if successful.
     */
    List<PlenaryMemberVoting> getFactionVotingStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Fraktsiooni hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PlenaryMemberVoting>> getFactionVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang, final ServiceCallback<List<PlenaryMemberVoting>> serviceCallback);

    /**
     * Fraktsiooni hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMemberVoting&gt; object
     */
    Observable<List<PlenaryMemberVoting>> getFactionVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Fraktsiooni hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Fraktsiooni UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMemberVoting&gt; object
     */
    Observable<ServiceResponse<List<PlenaryMemberVoting>>> getFactionVotingStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Riigikogu liikme hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PlenaryMemberVoting object if successful.
     */
    PlenaryMemberVoting getMemberVotingStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Riigikogu liikme hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PlenaryMemberVoting> getMemberVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, final ServiceCallback<PlenaryMemberVoting> serviceCallback);

    /**
     * Riigikogu liikme hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryMemberVoting object
     */
    Observable<PlenaryMemberVoting> getMemberVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid);

    /**
     * Riigikogu liikme hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryMemberVoting object
     */
    Observable<ServiceResponse<PlenaryMemberVoting>> getMemberVotingStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid);
    /**
     * Riigikogu liikme hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PlenaryMemberVoting object if successful.
     */
    PlenaryMemberVoting getMemberVotingStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Riigikogu liikme hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PlenaryMemberVoting> getMemberVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang, final ServiceCallback<PlenaryMemberVoting> serviceCallback);

    /**
     * Riigikogu liikme hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryMemberVoting object
     */
    Observable<PlenaryMemberVoting> getMemberVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Riigikogu liikme hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param uuid Liikme UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryMemberVoting object
     */
    Observable<ServiceResponse<PlenaryMemberVoting>> getMemberVotingStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String uuid, String lang);

    /**
     * Täiskogu hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PlenaryMemberVoting&gt; object if successful.
     */
    List<PlenaryMemberVoting> getPlenaryVotingStatisticsUsingGET(LocalDate endDate, LocalDate startDate);

    /**
     * Täiskogu hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PlenaryMemberVoting>> getPlenaryVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, final ServiceCallback<List<PlenaryMemberVoting>> serviceCallback);

    /**
     * Täiskogu hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMemberVoting&gt; object
     */
    Observable<List<PlenaryMemberVoting>> getPlenaryVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate);

    /**
     * Täiskogu hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMemberVoting&gt; object
     */
    Observable<ServiceResponse<List<PlenaryMemberVoting>>> getPlenaryVotingStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate);
    /**
     * Täiskogu hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PlenaryMemberVoting&gt; object if successful.
     */
    List<PlenaryMemberVoting> getPlenaryVotingStatisticsUsingGET(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Täiskogu hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PlenaryMemberVoting>> getPlenaryVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String lang, final ServiceCallback<List<PlenaryMemberVoting>> serviceCallback);

    /**
     * Täiskogu hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMemberVoting&gt; object
     */
    Observable<List<PlenaryMemberVoting>> getPlenaryVotingStatisticsUsingGETAsync(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Täiskogu hääletuste statistika.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenaryMemberVoting&gt; object
     */
    Observable<ServiceResponse<List<PlenaryMemberVoting>>> getPlenaryVotingStatisticsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Päevakorrapunktide steno lingid.
     * Steno XML-RPC teenus: getStenoTekstPaevakordUrl.
     *
     * @param uuids Päevakorrapunktide UUID-d (komaga eraldatud)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AgendaStenoUrl&gt; object if successful.
     */
    List<AgendaStenoUrl> getAgendaUrlsUsingGET(String uuids);

    /**
     * Päevakorrapunktide steno lingid.
     * Steno XML-RPC teenus: getStenoTekstPaevakordUrl.
     *
     * @param uuids Päevakorrapunktide UUID-d (komaga eraldatud)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<AgendaStenoUrl>> getAgendaUrlsUsingGETAsync(String uuids, final ServiceCallback<List<AgendaStenoUrl>> serviceCallback);

    /**
     * Päevakorrapunktide steno lingid.
     * Steno XML-RPC teenus: getStenoTekstPaevakordUrl.
     *
     * @param uuids Päevakorrapunktide UUID-d (komaga eraldatud)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AgendaStenoUrl&gt; object
     */
    Observable<List<AgendaStenoUrl>> getAgendaUrlsUsingGETAsync(String uuids);

    /**
     * Päevakorrapunktide steno lingid.
     * Steno XML-RPC teenus: getStenoTekstPaevakordUrl.
     *
     * @param uuids Päevakorrapunktide UUID-d (komaga eraldatud)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AgendaStenoUrl&gt; object
     */
    Observable<ServiceResponse<List<AgendaStenoUrl>>> getAgendaUrlsUsingGETWithServiceResponseAsync(String uuids);

    /**
     * Viimased stenogrammid.
     * Steno XML-RPC teenus: getViimasedStenogrammid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getLastVerbatimsUsingGET();

    /**
     * Viimased stenogrammid.
     * Steno XML-RPC teenus: getViimasedStenogrammid.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getLastVerbatimsUsingGETAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Viimased stenogrammid.
     * Steno XML-RPC teenus: getViimasedStenogrammid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getLastVerbatimsUsingGETAsync();

    /**
     * Viimased stenogrammid.
     * Steno XML-RPC teenus: getViimasedStenogrammid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getLastVerbatimsUsingGETWithServiceResponseAsync();
    /**
     * Viimased stenogrammid.
     * Steno XML-RPC teenus: getViimasedStenogrammid.
     *
     * @param count Tagastatavate stenogrammide arv
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getLastVerbatimsUsingGET(Integer count);

    /**
     * Viimased stenogrammid.
     * Steno XML-RPC teenus: getViimasedStenogrammid.
     *
     * @param count Tagastatavate stenogrammide arv
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getLastVerbatimsUsingGETAsync(Integer count, final ServiceCallback<Object> serviceCallback);

    /**
     * Viimased stenogrammid.
     * Steno XML-RPC teenus: getViimasedStenogrammid.
     *
     * @param count Tagastatavate stenogrammide arv
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getLastVerbatimsUsingGETAsync(Integer count);

    /**
     * Viimased stenogrammid.
     * Steno XML-RPC teenus: getViimasedStenogrammid.
     *
     * @param count Tagastatavate stenogrammide arv
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getLastVerbatimsUsingGETWithServiceResponseAsync(Integer count);

    /**
     * Isikute kõnede ja sõnavõttude arv.
     * Steno XML-RPC teenus: getStenoTekstIsikKoned.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuids Isikute UUID-d (komaga eraldatud)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;StenoSpeeches&gt; object if successful.
     */
    List<StenoSpeeches> getSpeechesUsingGET(LocalDate endDate, LocalDate startDate, String userUuids);

    /**
     * Isikute kõnede ja sõnavõttude arv.
     * Steno XML-RPC teenus: getStenoTekstIsikKoned.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuids Isikute UUID-d (komaga eraldatud)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<StenoSpeeches>> getSpeechesUsingGETAsync(LocalDate endDate, LocalDate startDate, String userUuids, final ServiceCallback<List<StenoSpeeches>> serviceCallback);

    /**
     * Isikute kõnede ja sõnavõttude arv.
     * Steno XML-RPC teenus: getStenoTekstIsikKoned.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuids Isikute UUID-d (komaga eraldatud)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;StenoSpeeches&gt; object
     */
    Observable<List<StenoSpeeches>> getSpeechesUsingGETAsync(LocalDate endDate, LocalDate startDate, String userUuids);

    /**
     * Isikute kõnede ja sõnavõttude arv.
     * Steno XML-RPC teenus: getStenoTekstIsikKoned.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuids Isikute UUID-d (komaga eraldatud)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;StenoSpeeches&gt; object
     */
    Observable<ServiceResponse<List<StenoSpeeches>>> getSpeechesUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String userUuids);
    /**
     * Isikute kõnede ja sõnavõttude arv.
     * Steno XML-RPC teenus: getStenoTekstIsikKoned.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuids Isikute UUID-d (komaga eraldatud)
     * @param membership Koosseisu number
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;StenoSpeeches&gt; object if successful.
     */
    List<StenoSpeeches> getSpeechesUsingGET(LocalDate endDate, LocalDate startDate, String userUuids, Integer membership);

    /**
     * Isikute kõnede ja sõnavõttude arv.
     * Steno XML-RPC teenus: getStenoTekstIsikKoned.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuids Isikute UUID-d (komaga eraldatud)
     * @param membership Koosseisu number
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<StenoSpeeches>> getSpeechesUsingGETAsync(LocalDate endDate, LocalDate startDate, String userUuids, Integer membership, final ServiceCallback<List<StenoSpeeches>> serviceCallback);

    /**
     * Isikute kõnede ja sõnavõttude arv.
     * Steno XML-RPC teenus: getStenoTekstIsikKoned.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuids Isikute UUID-d (komaga eraldatud)
     * @param membership Koosseisu number
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;StenoSpeeches&gt; object
     */
    Observable<List<StenoSpeeches>> getSpeechesUsingGETAsync(LocalDate endDate, LocalDate startDate, String userUuids, Integer membership);

    /**
     * Isikute kõnede ja sõnavõttude arv.
     * Steno XML-RPC teenus: getStenoTekstIsikKoned.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuids Isikute UUID-d (komaga eraldatud)
     * @param membership Koosseisu number
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;StenoSpeeches&gt; object
     */
    Observable<ServiceResponse<List<StenoSpeeches>>> getSpeechesUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String userUuids, Integer membership);

    /**
     * Isiku sõnavõttude arv.
     * Steno XML-RPC teenus: getIsikSonavotudCount.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuid Isiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StenoSpeechesCount object if successful.
     */
    StenoSpeechesCount getSpeechCountUsingGET(LocalDate endDate, LocalDate startDate, String userUuid);

    /**
     * Isiku sõnavõttude arv.
     * Steno XML-RPC teenus: getIsikSonavotudCount.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuid Isiku UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StenoSpeechesCount> getSpeechCountUsingGETAsync(LocalDate endDate, LocalDate startDate, String userUuid, final ServiceCallback<StenoSpeechesCount> serviceCallback);

    /**
     * Isiku sõnavõttude arv.
     * Steno XML-RPC teenus: getIsikSonavotudCount.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuid Isiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StenoSpeechesCount object
     */
    Observable<StenoSpeechesCount> getSpeechCountUsingGETAsync(LocalDate endDate, LocalDate startDate, String userUuid);

    /**
     * Isiku sõnavõttude arv.
     * Steno XML-RPC teenus: getIsikSonavotudCount.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuid Isiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StenoSpeechesCount object
     */
    Observable<ServiceResponse<StenoSpeechesCount>> getSpeechCountUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String userUuid);
    /**
     * Isiku sõnavõttude arv.
     * Steno XML-RPC teenus: getIsikSonavotudCount.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuid Isiku UUID
     * @param membership Koosseisu number
     * @param type Istungi tüüp. Possible values include: 'IS', 'IT'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StenoSpeechesCount object if successful.
     */
    StenoSpeechesCount getSpeechCountUsingGET(LocalDate endDate, LocalDate startDate, String userUuid, Integer membership, String type);

    /**
     * Isiku sõnavõttude arv.
     * Steno XML-RPC teenus: getIsikSonavotudCount.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuid Isiku UUID
     * @param membership Koosseisu number
     * @param type Istungi tüüp. Possible values include: 'IS', 'IT'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StenoSpeechesCount> getSpeechCountUsingGETAsync(LocalDate endDate, LocalDate startDate, String userUuid, Integer membership, String type, final ServiceCallback<StenoSpeechesCount> serviceCallback);

    /**
     * Isiku sõnavõttude arv.
     * Steno XML-RPC teenus: getIsikSonavotudCount.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuid Isiku UUID
     * @param membership Koosseisu number
     * @param type Istungi tüüp. Possible values include: 'IS', 'IT'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StenoSpeechesCount object
     */
    Observable<StenoSpeechesCount> getSpeechCountUsingGETAsync(LocalDate endDate, LocalDate startDate, String userUuid, Integer membership, String type);

    /**
     * Isiku sõnavõttude arv.
     * Steno XML-RPC teenus: getIsikSonavotudCount.
     *
     * @param endDate Lõppkuupäev (yyyy-MM-dd)
     * @param startDate Alguskuupäev (yyyy-MM-dd)
     * @param userUuid Isiku UUID
     * @param membership Koosseisu number
     * @param type Istungi tüüp. Possible values include: 'IS', 'IT'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StenoSpeechesCount object
     */
    Observable<ServiceResponse<StenoSpeechesCount>> getSpeechCountUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String userUuid, Integer membership, String type);

    /**
     * Isiku viimane sõnavõtt.
     * Steno XML-RPC teenus: getViimaneSonavott.
     *
     * @param userUuid Isiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LastStenoSpeech object if successful.
     */
    LastStenoSpeech getLastSpeechUsingGET(String userUuid);

    /**
     * Isiku viimane sõnavõtt.
     * Steno XML-RPC teenus: getViimaneSonavott.
     *
     * @param userUuid Isiku UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<LastStenoSpeech> getLastSpeechUsingGETAsync(String userUuid, final ServiceCallback<LastStenoSpeech> serviceCallback);

    /**
     * Isiku viimane sõnavõtt.
     * Steno XML-RPC teenus: getViimaneSonavott.
     *
     * @param userUuid Isiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LastStenoSpeech object
     */
    Observable<LastStenoSpeech> getLastSpeechUsingGETAsync(String userUuid);

    /**
     * Isiku viimane sõnavõtt.
     * Steno XML-RPC teenus: getViimaneSonavott.
     *
     * @param userUuid Isiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LastStenoSpeech object
     */
    Observable<ServiceResponse<LastStenoSpeech>> getLastSpeechUsingGETWithServiceResponseAsync(String userUuid);
    /**
     * Isiku viimane sõnavõtt.
     * Steno XML-RPC teenus: getViimaneSonavott.
     *
     * @param userUuid Isiku UUID
     * @param charCount Tähemärkide arv
     * @param membership Koosseisu number
     * @param type Istungi tüüp. Possible values include: 'IS', 'IT'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LastStenoSpeech object if successful.
     */
    LastStenoSpeech getLastSpeechUsingGET(String userUuid, Integer charCount, Integer membership, String type);

    /**
     * Isiku viimane sõnavõtt.
     * Steno XML-RPC teenus: getViimaneSonavott.
     *
     * @param userUuid Isiku UUID
     * @param charCount Tähemärkide arv
     * @param membership Koosseisu number
     * @param type Istungi tüüp. Possible values include: 'IS', 'IT'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<LastStenoSpeech> getLastSpeechUsingGETAsync(String userUuid, Integer charCount, Integer membership, String type, final ServiceCallback<LastStenoSpeech> serviceCallback);

    /**
     * Isiku viimane sõnavõtt.
     * Steno XML-RPC teenus: getViimaneSonavott.
     *
     * @param userUuid Isiku UUID
     * @param charCount Tähemärkide arv
     * @param membership Koosseisu number
     * @param type Istungi tüüp. Possible values include: 'IS', 'IT'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LastStenoSpeech object
     */
    Observable<LastStenoSpeech> getLastSpeechUsingGETAsync(String userUuid, Integer charCount, Integer membership, String type);

    /**
     * Isiku viimane sõnavõtt.
     * Steno XML-RPC teenus: getViimaneSonavott.
     *
     * @param userUuid Isiku UUID
     * @param charCount Tähemärkide arv
     * @param membership Koosseisu number
     * @param type Istungi tüüp. Possible values include: 'IS', 'IT'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LastStenoSpeech object
     */
    Observable<ServiceResponse<LastStenoSpeech>> getLastSpeechUsingGETWithServiceResponseAsync(String userUuid, Integer charCount, Integer membership, String type);

    /**
     * Kasutajagruppide nimekiri/otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserGroup&gt; object if successful.
     */
    List<UserGroup> findUserGroupsUsingGET();

    /**
     * Kasutajagruppide nimekiri/otsing.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserGroup>> findUserGroupsUsingGETAsync(final ServiceCallback<List<UserGroup>> serviceCallback);

    /**
     * Kasutajagruppide nimekiri/otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserGroup&gt; object
     */
    Observable<List<UserGroup>> findUserGroupsUsingGETAsync();

    /**
     * Kasutajagruppide nimekiri/otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserGroup&gt; object
     */
    Observable<ServiceResponse<List<UserGroup>>> findUserGroupsUsingGETWithServiceResponseAsync();
    /**
     * Kasutajagruppide nimekiri/otsing.
     *
     * @param hideInactive hideInactive
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param name Nimi
     * @param typeCode Tüübi kood (klassifikaator 'kasutajagrupiTuup'). Possible values include: 'UURIMISKOMISJON', 'VANA_FRAKTSIOON', 'VANA_ERIKOMISJON', 'VANA_ALALINE_KOMISJON', 'ALALINE_KOMISJON', 'ERIKOMISJON', 'RIIGIKOGU_JUHATUS', 'ESIMEHE_BÜROO', 'OSAKOND', 'VALIMISRINGKOND', 'TOETUSRYHM', 'ASUTUSE_YKSUS', 'PARLAMENDIRYHM', 'YHENDUS', 'FRAKTSIOON', 'DELEGATSIOON', 'RIIGIKOGU_TAISKOGU', 'ERAKOND', 'AMETNIK', 'TALITUS'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserGroup&gt; object if successful.
     */
    List<UserGroup> findUserGroupsUsingGET(Boolean hideInactive, String lang, String name, String typeCode);

    /**
     * Kasutajagruppide nimekiri/otsing.
     *
     * @param hideInactive hideInactive
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param name Nimi
     * @param typeCode Tüübi kood (klassifikaator 'kasutajagrupiTuup'). Possible values include: 'UURIMISKOMISJON', 'VANA_FRAKTSIOON', 'VANA_ERIKOMISJON', 'VANA_ALALINE_KOMISJON', 'ALALINE_KOMISJON', 'ERIKOMISJON', 'RIIGIKOGU_JUHATUS', 'ESIMEHE_BÜROO', 'OSAKOND', 'VALIMISRINGKOND', 'TOETUSRYHM', 'ASUTUSE_YKSUS', 'PARLAMENDIRYHM', 'YHENDUS', 'FRAKTSIOON', 'DELEGATSIOON', 'RIIGIKOGU_TAISKOGU', 'ERAKOND', 'AMETNIK', 'TALITUS'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserGroup>> findUserGroupsUsingGETAsync(Boolean hideInactive, String lang, String name, String typeCode, final ServiceCallback<List<UserGroup>> serviceCallback);

    /**
     * Kasutajagruppide nimekiri/otsing.
     *
     * @param hideInactive hideInactive
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param name Nimi
     * @param typeCode Tüübi kood (klassifikaator 'kasutajagrupiTuup'). Possible values include: 'UURIMISKOMISJON', 'VANA_FRAKTSIOON', 'VANA_ERIKOMISJON', 'VANA_ALALINE_KOMISJON', 'ALALINE_KOMISJON', 'ERIKOMISJON', 'RIIGIKOGU_JUHATUS', 'ESIMEHE_BÜROO', 'OSAKOND', 'VALIMISRINGKOND', 'TOETUSRYHM', 'ASUTUSE_YKSUS', 'PARLAMENDIRYHM', 'YHENDUS', 'FRAKTSIOON', 'DELEGATSIOON', 'RIIGIKOGU_TAISKOGU', 'ERAKOND', 'AMETNIK', 'TALITUS'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserGroup&gt; object
     */
    Observable<List<UserGroup>> findUserGroupsUsingGETAsync(Boolean hideInactive, String lang, String name, String typeCode);

    /**
     * Kasutajagruppide nimekiri/otsing.
     *
     * @param hideInactive hideInactive
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param name Nimi
     * @param typeCode Tüübi kood (klassifikaator 'kasutajagrupiTuup'). Possible values include: 'UURIMISKOMISJON', 'VANA_FRAKTSIOON', 'VANA_ERIKOMISJON', 'VANA_ALALINE_KOMISJON', 'ALALINE_KOMISJON', 'ERIKOMISJON', 'RIIGIKOGU_JUHATUS', 'ESIMEHE_BÜROO', 'OSAKOND', 'VALIMISRINGKOND', 'TOETUSRYHM', 'ASUTUSE_YKSUS', 'PARLAMENDIRYHM', 'YHENDUS', 'FRAKTSIOON', 'DELEGATSIOON', 'RIIGIKOGU_TAISKOGU', 'ERAKOND', 'AMETNIK', 'TALITUS'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserGroup&gt; object
     */
    Observable<ServiceResponse<List<UserGroup>>> findUserGroupsUsingGETWithServiceResponseAsync(Boolean hideInactive, String lang, String name, String typeCode);

    /**
     * getUserGroup.
     *
     * @param uuid Kasutajagrupi UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserGroup object if successful.
     */
    UserGroup getUserGroupUsingGET(String uuid);

    /**
     * getUserGroup.
     *
     * @param uuid Kasutajagrupi UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UserGroup> getUserGroupUsingGETAsync(String uuid, final ServiceCallback<UserGroup> serviceCallback);

    /**
     * getUserGroup.
     *
     * @param uuid Kasutajagrupi UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserGroup object
     */
    Observable<UserGroup> getUserGroupUsingGETAsync(String uuid);

    /**
     * getUserGroup.
     *
     * @param uuid Kasutajagrupi UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserGroup object
     */
    Observable<ServiceResponse<UserGroup>> getUserGroupUsingGETWithServiceResponseAsync(String uuid);
    /**
     * getUserGroup.
     *
     * @param uuid Kasutajagrupi UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserGroup object if successful.
     */
    UserGroup getUserGroupUsingGET(String uuid, String lang);

    /**
     * getUserGroup.
     *
     * @param uuid Kasutajagrupi UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UserGroup> getUserGroupUsingGETAsync(String uuid, String lang, final ServiceCallback<UserGroup> serviceCallback);

    /**
     * getUserGroup.
     *
     * @param uuid Kasutajagrupi UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserGroup object
     */
    Observable<UserGroup> getUserGroupUsingGETAsync(String uuid, String lang);

    /**
     * getUserGroup.
     *
     * @param uuid Kasutajagrupi UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserGroup object
     */
    Observable<ServiceResponse<UserGroup>> getUserGroupUsingGETWithServiceResponseAsync(String uuid, String lang);

    /**
     * Toimikute otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfVolumes object if successful.
     */
    PagedResourcesOfVolumes findVolumesUsingGET();

    /**
     * Toimikute otsing.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfVolumes> findVolumesUsingGETAsync(final ServiceCallback<PagedResourcesOfVolumes> serviceCallback);

    /**
     * Toimikute otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfVolumes object
     */
    Observable<PagedResourcesOfVolumes> findVolumesUsingGETAsync();

    /**
     * Toimikute otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfVolumes object
     */
    Observable<ServiceResponse<PagedResourcesOfVolumes>> findVolumesUsingGETWithServiceResponseAsync();
    /**
     * Toimikute otsing.
     *
     * @param createdEndDate Loomiskuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param createdStartDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param functionGroupUuid Funktsioonigrupi UUID
     * @param functionUuid Funktsiooni UUID
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param reference Viit
     * @param seriesUuid Sarja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subseriesUuid Alamsarja UUID
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @param volumeType Toimiku tüüp. Possible values include: 'letterVolume', 'elVolume', 'dokumenditoimik', 'unitSittingVolume', 'officialJourneyVolume', 'opinionVolume', 'plenarySittingVolume', 'infoSittingVolume', 'interpellationsVolume', 'eelnou', 'writtenQuestionVolume', 'researchVolume', 'procurementVolume', 'visitVolume'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfVolumes object if successful.
     */
    PagedResourcesOfVolumes findVolumesUsingGET(LocalDate createdEndDate, LocalDate createdStartDate, String functionGroupUuid, String functionUuid, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String reference, String seriesUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String subseriesUuid, String title, Boolean unpaged, String volumeType);

    /**
     * Toimikute otsing.
     *
     * @param createdEndDate Loomiskuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param createdStartDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param functionGroupUuid Funktsioonigrupi UUID
     * @param functionUuid Funktsiooni UUID
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param reference Viit
     * @param seriesUuid Sarja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subseriesUuid Alamsarja UUID
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @param volumeType Toimiku tüüp. Possible values include: 'letterVolume', 'elVolume', 'dokumenditoimik', 'unitSittingVolume', 'officialJourneyVolume', 'opinionVolume', 'plenarySittingVolume', 'infoSittingVolume', 'interpellationsVolume', 'eelnou', 'writtenQuestionVolume', 'researchVolume', 'procurementVolume', 'visitVolume'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfVolumes> findVolumesUsingGETAsync(LocalDate createdEndDate, LocalDate createdStartDate, String functionGroupUuid, String functionUuid, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String reference, String seriesUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String subseriesUuid, String title, Boolean unpaged, String volumeType, final ServiceCallback<PagedResourcesOfVolumes> serviceCallback);

    /**
     * Toimikute otsing.
     *
     * @param createdEndDate Loomiskuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param createdStartDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param functionGroupUuid Funktsioonigrupi UUID
     * @param functionUuid Funktsiooni UUID
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param reference Viit
     * @param seriesUuid Sarja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subseriesUuid Alamsarja UUID
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @param volumeType Toimiku tüüp. Possible values include: 'letterVolume', 'elVolume', 'dokumenditoimik', 'unitSittingVolume', 'officialJourneyVolume', 'opinionVolume', 'plenarySittingVolume', 'infoSittingVolume', 'interpellationsVolume', 'eelnou', 'writtenQuestionVolume', 'researchVolume', 'procurementVolume', 'visitVolume'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfVolumes object
     */
    Observable<PagedResourcesOfVolumes> findVolumesUsingGETAsync(LocalDate createdEndDate, LocalDate createdStartDate, String functionGroupUuid, String functionUuid, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String reference, String seriesUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String subseriesUuid, String title, Boolean unpaged, String volumeType);

    /**
     * Toimikute otsing.
     *
     * @param createdEndDate Loomiskuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param createdStartDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param functionGroupUuid Funktsioonigrupi UUID
     * @param functionUuid Funktsiooni UUID
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param reference Viit
     * @param seriesUuid Sarja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param subseriesUuid Alamsarja UUID
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @param volumeType Toimiku tüüp. Possible values include: 'letterVolume', 'elVolume', 'dokumenditoimik', 'unitSittingVolume', 'officialJourneyVolume', 'opinionVolume', 'plenarySittingVolume', 'infoSittingVolume', 'interpellationsVolume', 'eelnou', 'writtenQuestionVolume', 'researchVolume', 'procurementVolume', 'visitVolume'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfVolumes object
     */
    Observable<ServiceResponse<PagedResourcesOfVolumes>> findVolumesUsingGETWithServiceResponseAsync(LocalDate createdEndDate, LocalDate createdStartDate, String functionGroupUuid, String functionUuid, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String reference, String seriesUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String subseriesUuid, String title, Boolean unpaged, String volumeType);

    /**
     * Eelnõude otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfDraftVolumes object if successful.
     */
    PagedResourcesOfDraftVolumes findDraftVolumesUsingGET();

    /**
     * Eelnõude otsing.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfDraftVolumes> findDraftVolumesUsingGETAsync(final ServiceCallback<PagedResourcesOfDraftVolumes> serviceCallback);

    /**
     * Eelnõude otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfDraftVolumes object
     */
    Observable<PagedResourcesOfDraftVolumes> findDraftVolumesUsingGETAsync();

    /**
     * Eelnõude otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfDraftVolumes object
     */
    Observable<ServiceResponse<PagedResourcesOfDraftVolumes>> findDraftVolumesUsingGETWithServiceResponseAsync();
    /**
     * Eelnõude otsing.
     *
     * @param activeDraftStage Aktiivne menetlusetapp
     * @param amendmentsDeadlineEndDate Muudatuseteepanekute tähtaja vahemiku lõpp (yyyy-MM-dd)
     * @param amendmentsDeadlineStartDate Muudatuseteepanekute tähtaja vahemiku algus (yyyy-MM-dd)
     * @param descriptorId Märksõna ID
     * @param draftTypeCode Eelnõu liik (klassifikaator 'eelnouLiik'). Possible values include: 'UA', 'DE', 'PE', 'AE', 'TK', 'SE', 'OE'
     * @param initiatedEndDate Algatamise kuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param initiatedStartDate Algatamise kuupäeva vahemiku algus (yyyy-MM-dd)
     * @param initiatorUuid Algataja UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param leadingCommitteeUuid Juhtivkomisjoni UUID
     * @param mark Registreerimise number
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param proceedingStatus Menetluse staatus. Possible values include: 'IN_PROCESS', 'PROCESSED'
     * @param reference Viit
     * @param responsibleMemberUuid Juhtivkomisjoni esindaja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfDraftVolumes object if successful.
     */
    PagedResourcesOfDraftVolumes findDraftVolumesUsingGET(String activeDraftStage, LocalDate amendmentsDeadlineEndDate, LocalDate amendmentsDeadlineStartDate, Integer descriptorId, String draftTypeCode, LocalDate initiatedEndDate, LocalDate initiatedStartDate, String initiatorUuid, String lang, String leadingCommitteeUuid, Integer mark, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String proceedingStatus, String reference, String responsibleMemberUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String title, Boolean unpaged);

    /**
     * Eelnõude otsing.
     *
     * @param activeDraftStage Aktiivne menetlusetapp
     * @param amendmentsDeadlineEndDate Muudatuseteepanekute tähtaja vahemiku lõpp (yyyy-MM-dd)
     * @param amendmentsDeadlineStartDate Muudatuseteepanekute tähtaja vahemiku algus (yyyy-MM-dd)
     * @param descriptorId Märksõna ID
     * @param draftTypeCode Eelnõu liik (klassifikaator 'eelnouLiik'). Possible values include: 'UA', 'DE', 'PE', 'AE', 'TK', 'SE', 'OE'
     * @param initiatedEndDate Algatamise kuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param initiatedStartDate Algatamise kuupäeva vahemiku algus (yyyy-MM-dd)
     * @param initiatorUuid Algataja UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param leadingCommitteeUuid Juhtivkomisjoni UUID
     * @param mark Registreerimise number
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param proceedingStatus Menetluse staatus. Possible values include: 'IN_PROCESS', 'PROCESSED'
     * @param reference Viit
     * @param responsibleMemberUuid Juhtivkomisjoni esindaja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfDraftVolumes> findDraftVolumesUsingGETAsync(String activeDraftStage, LocalDate amendmentsDeadlineEndDate, LocalDate amendmentsDeadlineStartDate, Integer descriptorId, String draftTypeCode, LocalDate initiatedEndDate, LocalDate initiatedStartDate, String initiatorUuid, String lang, String leadingCommitteeUuid, Integer mark, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String proceedingStatus, String reference, String responsibleMemberUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String title, Boolean unpaged, final ServiceCallback<PagedResourcesOfDraftVolumes> serviceCallback);

    /**
     * Eelnõude otsing.
     *
     * @param activeDraftStage Aktiivne menetlusetapp
     * @param amendmentsDeadlineEndDate Muudatuseteepanekute tähtaja vahemiku lõpp (yyyy-MM-dd)
     * @param amendmentsDeadlineStartDate Muudatuseteepanekute tähtaja vahemiku algus (yyyy-MM-dd)
     * @param descriptorId Märksõna ID
     * @param draftTypeCode Eelnõu liik (klassifikaator 'eelnouLiik'). Possible values include: 'UA', 'DE', 'PE', 'AE', 'TK', 'SE', 'OE'
     * @param initiatedEndDate Algatamise kuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param initiatedStartDate Algatamise kuupäeva vahemiku algus (yyyy-MM-dd)
     * @param initiatorUuid Algataja UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param leadingCommitteeUuid Juhtivkomisjoni UUID
     * @param mark Registreerimise number
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param proceedingStatus Menetluse staatus. Possible values include: 'IN_PROCESS', 'PROCESSED'
     * @param reference Viit
     * @param responsibleMemberUuid Juhtivkomisjoni esindaja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfDraftVolumes object
     */
    Observable<PagedResourcesOfDraftVolumes> findDraftVolumesUsingGETAsync(String activeDraftStage, LocalDate amendmentsDeadlineEndDate, LocalDate amendmentsDeadlineStartDate, Integer descriptorId, String draftTypeCode, LocalDate initiatedEndDate, LocalDate initiatedStartDate, String initiatorUuid, String lang, String leadingCommitteeUuid, Integer mark, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String proceedingStatus, String reference, String responsibleMemberUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String title, Boolean unpaged);

    /**
     * Eelnõude otsing.
     *
     * @param activeDraftStage Aktiivne menetlusetapp
     * @param amendmentsDeadlineEndDate Muudatuseteepanekute tähtaja vahemiku lõpp (yyyy-MM-dd)
     * @param amendmentsDeadlineStartDate Muudatuseteepanekute tähtaja vahemiku algus (yyyy-MM-dd)
     * @param descriptorId Märksõna ID
     * @param draftTypeCode Eelnõu liik (klassifikaator 'eelnouLiik'). Possible values include: 'UA', 'DE', 'PE', 'AE', 'TK', 'SE', 'OE'
     * @param initiatedEndDate Algatamise kuupäeva vahemiku lõpp (yyyy-MM-dd)
     * @param initiatedStartDate Algatamise kuupäeva vahemiku algus (yyyy-MM-dd)
     * @param initiatorUuid Algataja UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param leadingCommitteeUuid Juhtivkomisjoni UUID
     * @param mark Registreerimise number
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param proceedingStatus Menetluse staatus. Possible values include: 'IN_PROCESS', 'PROCESSED'
     * @param reference Viit
     * @param responsibleMemberUuid Juhtivkomisjoni esindaja UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param title Pealkiri
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfDraftVolumes object
     */
    Observable<ServiceResponse<PagedResourcesOfDraftVolumes>> findDraftVolumesUsingGETWithServiceResponseAsync(String activeDraftStage, LocalDate amendmentsDeadlineEndDate, LocalDate amendmentsDeadlineStartDate, Integer descriptorId, String draftTypeCode, LocalDate initiatedEndDate, LocalDate initiatedStartDate, String initiatorUuid, String lang, String leadingCommitteeUuid, Integer mark, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, String proceedingStatus, String reference, String responsibleMemberUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String title, Boolean unpaged);

    /**
     * test.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void testUsingGET();

    /**
     * test.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> testUsingGETAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * test.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> testUsingGETAsync();

    /**
     * test.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> testUsingGETWithServiceResponseAsync();
    /**
     * test.
     *
     * @param offset the Long value
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void testUsingGET(Long offset, Integer pageNumber, Integer pageSize, Boolean paged, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged);

    /**
     * test.
     *
     * @param offset the Long value
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> testUsingGETAsync(Long offset, Integer pageNumber, Integer pageSize, Boolean paged, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged, final ServiceCallback<Void> serviceCallback);

    /**
     * test.
     *
     * @param offset the Long value
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> testUsingGETAsync(Long offset, Integer pageNumber, Integer pageSize, Boolean paged, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged);

    /**
     * test.
     *
     * @param offset the Long value
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> testUsingGETWithServiceResponseAsync(Long offset, Integer pageNumber, Integer pageSize, Boolean paged, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged);

    /**
     * Eelnõu detailid.
     *
     * @param uuid Eelnõu toimiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DraftVolume object if successful.
     */
    DraftVolume getDraftVolumeUsingGET(String uuid);

    /**
     * Eelnõu detailid.
     *
     * @param uuid Eelnõu toimiku UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DraftVolume> getDraftVolumeUsingGETAsync(String uuid, final ServiceCallback<DraftVolume> serviceCallback);

    /**
     * Eelnõu detailid.
     *
     * @param uuid Eelnõu toimiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DraftVolume object
     */
    Observable<DraftVolume> getDraftVolumeUsingGETAsync(String uuid);

    /**
     * Eelnõu detailid.
     *
     * @param uuid Eelnõu toimiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DraftVolume object
     */
    Observable<ServiceResponse<DraftVolume>> getDraftVolumeUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Eelnõu detailid.
     *
     * @param uuid Eelnõu toimiku UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid? (true/false)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DraftVolume object if successful.
     */
    DraftVolume getDraftVolumeUsingGET(String uuid, String lang, Boolean querySteno);

    /**
     * Eelnõu detailid.
     *
     * @param uuid Eelnõu toimiku UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid? (true/false)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DraftVolume> getDraftVolumeUsingGETAsync(String uuid, String lang, Boolean querySteno, final ServiceCallback<DraftVolume> serviceCallback);

    /**
     * Eelnõu detailid.
     *
     * @param uuid Eelnõu toimiku UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid? (true/false)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DraftVolume object
     */
    Observable<DraftVolume> getDraftVolumeUsingGETAsync(String uuid, String lang, Boolean querySteno);

    /**
     * Eelnõu detailid.
     *
     * @param uuid Eelnõu toimiku UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param querySteno Küsi Stenoteksti teenusest päevakorra lingid? (true/false)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DraftVolume object
     */
    Observable<ServiceResponse<DraftVolume>> getDraftVolumeUsingGETWithServiceResponseAsync(String uuid, String lang, Boolean querySteno);

    /**
     * ERJK protokollide nimekiri.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ErjkProtocol&gt; object if successful.
     */
    List<ErjkProtocol> findErjkProtocolsUsingGET();

    /**
     * ERJK protokollide nimekiri.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ErjkProtocol>> findErjkProtocolsUsingGETAsync(final ServiceCallback<List<ErjkProtocol>> serviceCallback);

    /**
     * ERJK protokollide nimekiri.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ErjkProtocol&gt; object
     */
    Observable<List<ErjkProtocol>> findErjkProtocolsUsingGETAsync();

    /**
     * ERJK protokollide nimekiri.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ErjkProtocol&gt; object
     */
    Observable<ServiceResponse<List<ErjkProtocol>>> findErjkProtocolsUsingGETWithServiceResponseAsync();
    /**
     * ERJK protokollide nimekiri.
     *
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sorted the Boolean value
     * @param unsorted the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ErjkProtocol&gt; object if successful.
     */
    List<ErjkProtocol> findErjkProtocolsUsingGET(List<String> sort, Boolean sorted, Boolean unsorted);

    /**
     * ERJK protokollide nimekiri.
     *
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sorted the Boolean value
     * @param unsorted the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ErjkProtocol>> findErjkProtocolsUsingGETAsync(List<String> sort, Boolean sorted, Boolean unsorted, final ServiceCallback<List<ErjkProtocol>> serviceCallback);

    /**
     * ERJK protokollide nimekiri.
     *
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sorted the Boolean value
     * @param unsorted the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ErjkProtocol&gt; object
     */
    Observable<List<ErjkProtocol>> findErjkProtocolsUsingGETAsync(List<String> sort, Boolean sorted, Boolean unsorted);

    /**
     * ERJK protokollide nimekiri.
     *
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sorted the Boolean value
     * @param unsorted the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ErjkProtocol&gt; object
     */
    Observable<ServiceResponse<List<ErjkProtocol>>> findErjkProtocolsUsingGETWithServiceResponseAsync(List<String> sort, Boolean sorted, Boolean unsorted);

    /**
     * ERJK protokoll.
     *
     * @param uuid Toimiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ErjkProtocol object if successful.
     */
    ErjkProtocol findErjkProtocolUsingGET(String uuid);

    /**
     * ERJK protokoll.
     *
     * @param uuid Toimiku UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ErjkProtocol> findErjkProtocolUsingGETAsync(String uuid, final ServiceCallback<ErjkProtocol> serviceCallback);

    /**
     * ERJK protokoll.
     *
     * @param uuid Toimiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErjkProtocol object
     */
    Observable<ErjkProtocol> findErjkProtocolUsingGETAsync(String uuid);

    /**
     * ERJK protokoll.
     *
     * @param uuid Toimiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ErjkProtocol object
     */
    Observable<ServiceResponse<ErjkProtocol>> findErjkProtocolUsingGETWithServiceResponseAsync(String uuid);

    /**
     * Euroopa Liidu toimikute otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfEuropeanUnionDocument object if successful.
     */
    PagedResourcesOfEuropeanUnionDocument findEuropeanUnionDocumentsUsingGET();

    /**
     * Euroopa Liidu toimikute otsing.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfEuropeanUnionDocument> findEuropeanUnionDocumentsUsingGETAsync(final ServiceCallback<PagedResourcesOfEuropeanUnionDocument> serviceCallback);

    /**
     * Euroopa Liidu toimikute otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfEuropeanUnionDocument object
     */
    Observable<PagedResourcesOfEuropeanUnionDocument> findEuropeanUnionDocumentsUsingGETAsync();

    /**
     * Euroopa Liidu toimikute otsing.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfEuropeanUnionDocument object
     */
    Observable<ServiceResponse<PagedResourcesOfEuropeanUnionDocument>> findEuropeanUnionDocumentsUsingGETWithServiceResponseAsync();
    /**
     * Euroopa Liidu toimikute otsing.
     *
     * @param createdEndDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param createdStartDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param documentType Dokumendi liik (sh EL dokumendi liigid)
     * @param elMark EL toimiku tähis
     * @param elTypeCode EL toimiku liik (klassifikaator 'elToimikuliik'). Possible values include: 'MUU_EL_DOKUMENT', 'EL_ALGATUS', 'NOUKOGU_JA_ULEMKOGU_DOKUMENT'
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param opinionCommitteeUuid Arvamuse andja komisjoni UUID
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param receiveDateEnd Saabumise kuupäeva lõpp (yyyy-MM-dd)
     * @param receiveDateStart Saabumise kuupäeva algus (yyyy-MM-dd)
     * @param reference Viit
     * @param responsibleCommitteeUuid Vastutava komisjoni UUID
     * @param sectorCode Valdkond (klassifikaator 'elValdkond'). Possible values include: 'KESKKOND', 'HARIDUS_KULTUUR_NOORED', 'TOOHOIVE_SOTSIAAL_TERVISHOID_TARBIJAKAITSE', 'POLLUMAJANDUS_KALANDUS', 'TRANSPORT_TELE_ENERGEETIKA', 'JUSTIITS_SISEKUSIMUSED', 'MAJANDUS_RAHANDUS', 'KONKURENTSIVOIME', 'ULDASJAD', 'VALISASJAD'
     * @param sectorCommitteeUuid Valdkonna komisjoni UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param title Pealkiri
     * @param titleEn Pealkiri inglise keeles
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfEuropeanUnionDocument object if successful.
     */
    PagedResourcesOfEuropeanUnionDocument findEuropeanUnionDocumentsUsingGET(LocalDate createdEndDate, LocalDate createdStartDate, String documentType, String elMark, String elTypeCode, String lang, Integer membership, Long offset, String opinionCommitteeUuid, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, LocalDate receiveDateEnd, LocalDate receiveDateStart, String reference, String responsibleCommitteeUuid, String sectorCode, String sectorCommitteeUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String title, String titleEn, Boolean unpaged);

    /**
     * Euroopa Liidu toimikute otsing.
     *
     * @param createdEndDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param createdStartDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param documentType Dokumendi liik (sh EL dokumendi liigid)
     * @param elMark EL toimiku tähis
     * @param elTypeCode EL toimiku liik (klassifikaator 'elToimikuliik'). Possible values include: 'MUU_EL_DOKUMENT', 'EL_ALGATUS', 'NOUKOGU_JA_ULEMKOGU_DOKUMENT'
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param opinionCommitteeUuid Arvamuse andja komisjoni UUID
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param receiveDateEnd Saabumise kuupäeva lõpp (yyyy-MM-dd)
     * @param receiveDateStart Saabumise kuupäeva algus (yyyy-MM-dd)
     * @param reference Viit
     * @param responsibleCommitteeUuid Vastutava komisjoni UUID
     * @param sectorCode Valdkond (klassifikaator 'elValdkond'). Possible values include: 'KESKKOND', 'HARIDUS_KULTUUR_NOORED', 'TOOHOIVE_SOTSIAAL_TERVISHOID_TARBIJAKAITSE', 'POLLUMAJANDUS_KALANDUS', 'TRANSPORT_TELE_ENERGEETIKA', 'JUSTIITS_SISEKUSIMUSED', 'MAJANDUS_RAHANDUS', 'KONKURENTSIVOIME', 'ULDASJAD', 'VALISASJAD'
     * @param sectorCommitteeUuid Valdkonna komisjoni UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param title Pealkiri
     * @param titleEn Pealkiri inglise keeles
     * @param unpaged the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfEuropeanUnionDocument> findEuropeanUnionDocumentsUsingGETAsync(LocalDate createdEndDate, LocalDate createdStartDate, String documentType, String elMark, String elTypeCode, String lang, Integer membership, Long offset, String opinionCommitteeUuid, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, LocalDate receiveDateEnd, LocalDate receiveDateStart, String reference, String responsibleCommitteeUuid, String sectorCode, String sectorCommitteeUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String title, String titleEn, Boolean unpaged, final ServiceCallback<PagedResourcesOfEuropeanUnionDocument> serviceCallback);

    /**
     * Euroopa Liidu toimikute otsing.
     *
     * @param createdEndDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param createdStartDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param documentType Dokumendi liik (sh EL dokumendi liigid)
     * @param elMark EL toimiku tähis
     * @param elTypeCode EL toimiku liik (klassifikaator 'elToimikuliik'). Possible values include: 'MUU_EL_DOKUMENT', 'EL_ALGATUS', 'NOUKOGU_JA_ULEMKOGU_DOKUMENT'
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param opinionCommitteeUuid Arvamuse andja komisjoni UUID
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param receiveDateEnd Saabumise kuupäeva lõpp (yyyy-MM-dd)
     * @param receiveDateStart Saabumise kuupäeva algus (yyyy-MM-dd)
     * @param reference Viit
     * @param responsibleCommitteeUuid Vastutava komisjoni UUID
     * @param sectorCode Valdkond (klassifikaator 'elValdkond'). Possible values include: 'KESKKOND', 'HARIDUS_KULTUUR_NOORED', 'TOOHOIVE_SOTSIAAL_TERVISHOID_TARBIJAKAITSE', 'POLLUMAJANDUS_KALANDUS', 'TRANSPORT_TELE_ENERGEETIKA', 'JUSTIITS_SISEKUSIMUSED', 'MAJANDUS_RAHANDUS', 'KONKURENTSIVOIME', 'ULDASJAD', 'VALISASJAD'
     * @param sectorCommitteeUuid Valdkonna komisjoni UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param title Pealkiri
     * @param titleEn Pealkiri inglise keeles
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfEuropeanUnionDocument object
     */
    Observable<PagedResourcesOfEuropeanUnionDocument> findEuropeanUnionDocumentsUsingGETAsync(LocalDate createdEndDate, LocalDate createdStartDate, String documentType, String elMark, String elTypeCode, String lang, Integer membership, Long offset, String opinionCommitteeUuid, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, LocalDate receiveDateEnd, LocalDate receiveDateStart, String reference, String responsibleCommitteeUuid, String sectorCode, String sectorCommitteeUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String title, String titleEn, Boolean unpaged);

    /**
     * Euroopa Liidu toimikute otsing.
     *
     * @param createdEndDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param createdStartDate Loomiskuupäeva vahemiku algus (yyyy-MM-dd)
     * @param documentType Dokumendi liik (sh EL dokumendi liigid)
     * @param elMark EL toimiku tähis
     * @param elTypeCode EL toimiku liik (klassifikaator 'elToimikuliik'). Possible values include: 'MUU_EL_DOKUMENT', 'EL_ALGATUS', 'NOUKOGU_JA_ULEMKOGU_DOKUMENT'
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param opinionCommitteeUuid Arvamuse andja komisjoni UUID
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param receiveDateEnd Saabumise kuupäeva lõpp (yyyy-MM-dd)
     * @param receiveDateStart Saabumise kuupäeva algus (yyyy-MM-dd)
     * @param reference Viit
     * @param responsibleCommitteeUuid Vastutava komisjoni UUID
     * @param sectorCode Valdkond (klassifikaator 'elValdkond'). Possible values include: 'KESKKOND', 'HARIDUS_KULTUUR_NOORED', 'TOOHOIVE_SOTSIAAL_TERVISHOID_TARBIJAKAITSE', 'POLLUMAJANDUS_KALANDUS', 'TRANSPORT_TELE_ENERGEETIKA', 'JUSTIITS_SISEKUSIMUSED', 'MAJANDUS_RAHANDUS', 'KONKURENTSIVOIME', 'ULDASJAD', 'VALISASJAD'
     * @param sectorCommitteeUuid Valdkonna komisjoni UUID
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param title Pealkiri
     * @param titleEn Pealkiri inglise keeles
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfEuropeanUnionDocument object
     */
    Observable<ServiceResponse<PagedResourcesOfEuropeanUnionDocument>> findEuropeanUnionDocumentsUsingGETWithServiceResponseAsync(LocalDate createdEndDate, LocalDate createdStartDate, String documentType, String elMark, String elTypeCode, String lang, Integer membership, Long offset, String opinionCommitteeUuid, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, LocalDate receiveDateEnd, LocalDate receiveDateStart, String reference, String responsibleCommitteeUuid, String sectorCode, String sectorCommitteeUuid, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, String title, String titleEn, Boolean unpaged);

    /**
     * Arupärimised.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfInterpellations object if successful.
     */
    PagedResourcesOfInterpellations findInterpellationsUsingGET();

    /**
     * Arupärimised.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfInterpellations> findInterpellationsUsingGETAsync(final ServiceCallback<PagedResourcesOfInterpellations> serviceCallback);

    /**
     * Arupärimised.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfInterpellations object
     */
    Observable<PagedResourcesOfInterpellations> findInterpellationsUsingGETAsync();

    /**
     * Arupärimised.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfInterpellations object
     */
    Observable<ServiceResponse<PagedResourcesOfInterpellations>> findInterpellationsUsingGETWithServiceResponseAsync();
    /**
     * Arupärimised.
     *
     * @param enquirerUuid Küsija UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfInterpellations object if successful.
     */
    PagedResourcesOfInterpellations findInterpellationsUsingGET(String enquirerUuid, String lang, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged);

    /**
     * Arupärimised.
     *
     * @param enquirerUuid Küsija UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfInterpellations> findInterpellationsUsingGETAsync(String enquirerUuid, String lang, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged, final ServiceCallback<PagedResourcesOfInterpellations> serviceCallback);

    /**
     * Arupärimised.
     *
     * @param enquirerUuid Küsija UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfInterpellations object
     */
    Observable<PagedResourcesOfInterpellations> findInterpellationsUsingGETAsync(String enquirerUuid, String lang, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged);

    /**
     * Arupärimised.
     *
     * @param enquirerUuid Küsija UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfInterpellations object
     */
    Observable<ServiceResponse<PagedResourcesOfInterpellations>> findInterpellationsUsingGETWithServiceResponseAsync(String enquirerUuid, String lang, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged);

    /**
     * Kirjalikud küsimused.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfWrittenQuestions object if successful.
     */
    PagedResourcesOfWrittenQuestions findWrittenQuestionsUsingGET();

    /**
     * Kirjalikud küsimused.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfWrittenQuestions> findWrittenQuestionsUsingGETAsync(final ServiceCallback<PagedResourcesOfWrittenQuestions> serviceCallback);

    /**
     * Kirjalikud küsimused.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfWrittenQuestions object
     */
    Observable<PagedResourcesOfWrittenQuestions> findWrittenQuestionsUsingGETAsync();

    /**
     * Kirjalikud küsimused.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfWrittenQuestions object
     */
    Observable<ServiceResponse<PagedResourcesOfWrittenQuestions>> findWrittenQuestionsUsingGETWithServiceResponseAsync();
    /**
     * Kirjalikud küsimused.
     *
     * @param enquirerUuid Küsija UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfWrittenQuestions object if successful.
     */
    PagedResourcesOfWrittenQuestions findWrittenQuestionsUsingGET(String enquirerUuid, String lang, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged);

    /**
     * Kirjalikud küsimused.
     *
     * @param enquirerUuid Küsija UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfWrittenQuestions> findWrittenQuestionsUsingGETAsync(String enquirerUuid, String lang, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged, final ServiceCallback<PagedResourcesOfWrittenQuestions> serviceCallback);

    /**
     * Kirjalikud küsimused.
     *
     * @param enquirerUuid Küsija UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfWrittenQuestions object
     */
    Observable<PagedResourcesOfWrittenQuestions> findWrittenQuestionsUsingGETAsync(String enquirerUuid, String lang, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged);

    /**
     * Kirjalikud küsimused.
     *
     * @param enquirerUuid Küsija UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param membership Koosseisu number
     * @param offset the Long value
     * @param page Lehekülje number
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param size Tulemuste arv leheküljel (vaikimisi 20)
     * @param sort Sorteerimine (formaat: väli[,asc|desc])
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfWrittenQuestions object
     */
    Observable<ServiceResponse<PagedResourcesOfWrittenQuestions>> findWrittenQuestionsUsingGETWithServiceResponseAsync(String enquirerUuid, String lang, Integer membership, Long offset, Integer page, Integer pageNumber, Integer pageSize, Boolean paged, Integer size, List<String> sort, Boolean sortsorted, Boolean sortunsorted, Boolean unpaged);

    /**
     * Toimiku detailid.
     *
     * @param uuid Toimiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Volume object if successful.
     */
    Volume getVolumeUsingGET(String uuid);

    /**
     * Toimiku detailid.
     *
     * @param uuid Toimiku UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Volume> getVolumeUsingGETAsync(String uuid, final ServiceCallback<Volume> serviceCallback);

    /**
     * Toimiku detailid.
     *
     * @param uuid Toimiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Volume object
     */
    Observable<Volume> getVolumeUsingGETAsync(String uuid);

    /**
     * Toimiku detailid.
     *
     * @param uuid Toimiku UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Volume object
     */
    Observable<ServiceResponse<Volume>> getVolumeUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Toimiku detailid.
     *
     * @param uuid Toimiku UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Volume object if successful.
     */
    Volume getVolumeUsingGET(String uuid, String lang);

    /**
     * Toimiku detailid.
     *
     * @param uuid Toimiku UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Volume> getVolumeUsingGETAsync(String uuid, String lang, final ServiceCallback<Volume> serviceCallback);

    /**
     * Toimiku detailid.
     *
     * @param uuid Toimiku UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Volume object
     */
    Observable<Volume> getVolumeUsingGETAsync(String uuid, String lang);

    /**
     * Toimiku detailid.
     *
     * @param uuid Toimiku UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Volume object
     */
    Observable<ServiceResponse<Volume>> getVolumeUsingGETWithServiceResponseAsync(String uuid, String lang);

    /**
     * Hääletused.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PlenarySittingVoting&gt; object if successful.
     */
    List<PlenarySittingVoting> getVotingsUsingGET(LocalDate endDate, LocalDate startDate);

    /**
     * Hääletused.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PlenarySittingVoting>> getVotingsUsingGETAsync(LocalDate endDate, LocalDate startDate, final ServiceCallback<List<PlenarySittingVoting>> serviceCallback);

    /**
     * Hääletused.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenarySittingVoting&gt; object
     */
    Observable<List<PlenarySittingVoting>> getVotingsUsingGETAsync(LocalDate endDate, LocalDate startDate);

    /**
     * Hääletused.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenarySittingVoting&gt; object
     */
    Observable<ServiceResponse<List<PlenarySittingVoting>>> getVotingsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate);
    /**
     * Hääletused.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PlenarySittingVoting&gt; object if successful.
     */
    List<PlenarySittingVoting> getVotingsUsingGET(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Hääletused.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PlenarySittingVoting>> getVotingsUsingGETAsync(LocalDate endDate, LocalDate startDate, String lang, final ServiceCallback<List<PlenarySittingVoting>> serviceCallback);

    /**
     * Hääletused.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenarySittingVoting&gt; object
     */
    Observable<List<PlenarySittingVoting>> getVotingsUsingGETAsync(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Hääletused.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PlenarySittingVoting&gt; object
     */
    Observable<ServiceResponse<List<PlenarySittingVoting>>> getVotingsUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate, String lang);

    /**
     * Hääletuste kalender.
     * Kuupäevad, millal vähemalt üks hääletus on toimunud.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;VotingCalendar&gt; object if successful.
     */
    List<VotingCalendar> getVotingCalendarUsingGET(LocalDate endDate, LocalDate startDate);

    /**
     * Hääletuste kalender.
     * Kuupäevad, millal vähemalt üks hääletus on toimunud.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<VotingCalendar>> getVotingCalendarUsingGETAsync(LocalDate endDate, LocalDate startDate, final ServiceCallback<List<VotingCalendar>> serviceCallback);

    /**
     * Hääletuste kalender.
     * Kuupäevad, millal vähemalt üks hääletus on toimunud.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;VotingCalendar&gt; object
     */
    Observable<List<VotingCalendar>> getVotingCalendarUsingGETAsync(LocalDate endDate, LocalDate startDate);

    /**
     * Hääletuste kalender.
     * Kuupäevad, millal vähemalt üks hääletus on toimunud.
     *
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;VotingCalendar&gt; object
     */
    Observable<ServiceResponse<List<VotingCalendar>>> getVotingCalendarUsingGETWithServiceResponseAsync(LocalDate endDate, LocalDate startDate);

    /**
     * Riigikogu liikme hääletused komisjonides.
     *
     * @param userUuid userUuid
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserGroup&gt; object if successful.
     */
    List<UserGroup> findCommitteeMemberVotingsUsingGET(String userUuid);

    /**
     * Riigikogu liikme hääletused komisjonides.
     *
     * @param userUuid userUuid
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserGroup>> findCommitteeMemberVotingsUsingGETAsync(String userUuid, final ServiceCallback<List<UserGroup>> serviceCallback);

    /**
     * Riigikogu liikme hääletused komisjonides.
     *
     * @param userUuid userUuid
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserGroup&gt; object
     */
    Observable<List<UserGroup>> findCommitteeMemberVotingsUsingGETAsync(String userUuid);

    /**
     * Riigikogu liikme hääletused komisjonides.
     *
     * @param userUuid userUuid
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserGroup&gt; object
     */
    Observable<ServiceResponse<List<UserGroup>>> findCommitteeMemberVotingsUsingGETWithServiceResponseAsync(String userUuid);
    /**
     * Riigikogu liikme hääletused komisjonides.
     *
     * @param userUuid userUuid
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserGroup&gt; object if successful.
     */
    List<UserGroup> findCommitteeMemberVotingsUsingGET(String userUuid, LocalDate endDate, String lang, LocalDate startDate);

    /**
     * Riigikogu liikme hääletused komisjonides.
     *
     * @param userUuid userUuid
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserGroup>> findCommitteeMemberVotingsUsingGETAsync(String userUuid, LocalDate endDate, String lang, LocalDate startDate, final ServiceCallback<List<UserGroup>> serviceCallback);

    /**
     * Riigikogu liikme hääletused komisjonides.
     *
     * @param userUuid userUuid
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserGroup&gt; object
     */
    Observable<List<UserGroup>> findCommitteeMemberVotingsUsingGETAsync(String userUuid, LocalDate endDate, String lang, LocalDate startDate);

    /**
     * Riigikogu liikme hääletused komisjonides.
     *
     * @param userUuid userUuid
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserGroup&gt; object
     */
    Observable<ServiceResponse<List<UserGroup>>> findCommitteeMemberVotingsUsingGETWithServiceResponseAsync(String userUuid, LocalDate endDate, String lang, LocalDate startDate);

    /**
     * Komisjoni hääletused.
     *
     * @param uuid uuid
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CommitteeSitting&gt; object if successful.
     */
    List<CommitteeSitting> findCommitteeVotingsUsingGET(String uuid);

    /**
     * Komisjoni hääletused.
     *
     * @param uuid uuid
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<CommitteeSitting>> findCommitteeVotingsUsingGETAsync(String uuid, final ServiceCallback<List<CommitteeSitting>> serviceCallback);

    /**
     * Komisjoni hääletused.
     *
     * @param uuid uuid
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CommitteeSitting&gt; object
     */
    Observable<List<CommitteeSitting>> findCommitteeVotingsUsingGETAsync(String uuid);

    /**
     * Komisjoni hääletused.
     *
     * @param uuid uuid
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CommitteeSitting&gt; object
     */
    Observable<ServiceResponse<List<CommitteeSitting>>> findCommitteeVotingsUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Komisjoni hääletused.
     *
     * @param uuid uuid
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CommitteeSitting&gt; object if successful.
     */
    List<CommitteeSitting> findCommitteeVotingsUsingGET(String uuid, LocalDate endDate, String lang, LocalDate startDate);

    /**
     * Komisjoni hääletused.
     *
     * @param uuid uuid
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<CommitteeSitting>> findCommitteeVotingsUsingGETAsync(String uuid, LocalDate endDate, String lang, LocalDate startDate, final ServiceCallback<List<CommitteeSitting>> serviceCallback);

    /**
     * Komisjoni hääletused.
     *
     * @param uuid uuid
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CommitteeSitting&gt; object
     */
    Observable<List<CommitteeSitting>> findCommitteeVotingsUsingGETAsync(String uuid, LocalDate endDate, String lang, LocalDate startDate);

    /**
     * Komisjoni hääletused.
     *
     * @param uuid uuid
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang lang. Possible values include: 'et', 'ru', 'en'
     * @param startDate Kuupäevavahemiku algus (yyyy-MM-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CommitteeSitting&gt; object
     */
    Observable<ServiceResponse<List<CommitteeSitting>>> findCommitteeVotingsUsingGETWithServiceResponseAsync(String uuid, LocalDate endDate, String lang, LocalDate startDate);

    /**
     * Viimane hääletus.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PlenaryVotingDetails object if successful.
     */
    PlenaryVotingDetails getLastVotingUsingGET();

    /**
     * Viimane hääletus.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PlenaryVotingDetails> getLastVotingUsingGETAsync(final ServiceCallback<PlenaryVotingDetails> serviceCallback);

    /**
     * Viimane hääletus.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryVotingDetails object
     */
    Observable<PlenaryVotingDetails> getLastVotingUsingGETAsync();

    /**
     * Viimane hääletus.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryVotingDetails object
     */
    Observable<ServiceResponse<PlenaryVotingDetails>> getLastVotingUsingGETWithServiceResponseAsync();
    /**
     * Viimane hääletus.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PlenaryVotingDetails object if successful.
     */
    PlenaryVotingDetails getLastVotingUsingGET(String lang);

    /**
     * Viimane hääletus.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PlenaryVotingDetails> getLastVotingUsingGETAsync(String lang, final ServiceCallback<PlenaryVotingDetails> serviceCallback);

    /**
     * Viimane hääletus.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryVotingDetails object
     */
    Observable<PlenaryVotingDetails> getLastVotingUsingGETAsync(String lang);

    /**
     * Viimane hääletus.
     *
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryVotingDetails object
     */
    Observable<ServiceResponse<PlenaryVotingDetails>> getLastVotingUsingGETWithServiceResponseAsync(String lang);

    /**
     * Riigikogu liikme hääletused.
     *
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfPlenaryMemberSitting object if successful.
     */
    PagedResourcesOfPlenaryMemberSitting getPlenaryMemberVotingsUsingGET(String uuid);

    /**
     * Riigikogu liikme hääletused.
     *
     * @param uuid Liikme UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfPlenaryMemberSitting> getPlenaryMemberVotingsUsingGETAsync(String uuid, final ServiceCallback<PagedResourcesOfPlenaryMemberSitting> serviceCallback);

    /**
     * Riigikogu liikme hääletused.
     *
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfPlenaryMemberSitting object
     */
    Observable<PagedResourcesOfPlenaryMemberSitting> getPlenaryMemberVotingsUsingGETAsync(String uuid);

    /**
     * Riigikogu liikme hääletused.
     *
     * @param uuid Liikme UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfPlenaryMemberSitting object
     */
    Observable<ServiceResponse<PagedResourcesOfPlenaryMemberSitting>> getPlenaryMemberVotingsUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Riigikogu liikme hääletused.
     *
     * @param uuid Liikme UUID
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param offset the Long value
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param startDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResourcesOfPlenaryMemberSitting object if successful.
     */
    PagedResourcesOfPlenaryMemberSitting getPlenaryMemberVotingsUsingGET(String uuid, LocalDate endDate, String lang, Long offset, Integer pageNumber, Integer pageSize, Boolean paged, Boolean sortsorted, Boolean sortunsorted, LocalDate startDate, Boolean unpaged);

    /**
     * Riigikogu liikme hääletused.
     *
     * @param uuid Liikme UUID
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param offset the Long value
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param startDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param unpaged the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResourcesOfPlenaryMemberSitting> getPlenaryMemberVotingsUsingGETAsync(String uuid, LocalDate endDate, String lang, Long offset, Integer pageNumber, Integer pageSize, Boolean paged, Boolean sortsorted, Boolean sortunsorted, LocalDate startDate, Boolean unpaged, final ServiceCallback<PagedResourcesOfPlenaryMemberSitting> serviceCallback);

    /**
     * Riigikogu liikme hääletused.
     *
     * @param uuid Liikme UUID
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param offset the Long value
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param startDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfPlenaryMemberSitting object
     */
    Observable<PagedResourcesOfPlenaryMemberSitting> getPlenaryMemberVotingsUsingGETAsync(String uuid, LocalDate endDate, String lang, Long offset, Integer pageNumber, Integer pageSize, Boolean paged, Boolean sortsorted, Boolean sortunsorted, LocalDate startDate, Boolean unpaged);

    /**
     * Riigikogu liikme hääletused.
     *
     * @param uuid Liikme UUID
     * @param endDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param offset the Long value
     * @param pageNumber the Integer value
     * @param pageSize the Integer value
     * @param paged the Boolean value
     * @param sortsorted the Boolean value
     * @param sortunsorted the Boolean value
     * @param startDate Kuupäevavahemiku lõpp (yyyy-MM-dd)
     * @param unpaged the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResourcesOfPlenaryMemberSitting object
     */
    Observable<ServiceResponse<PagedResourcesOfPlenaryMemberSitting>> getPlenaryMemberVotingsUsingGETWithServiceResponseAsync(String uuid, LocalDate endDate, String lang, Long offset, Integer pageNumber, Integer pageSize, Boolean paged, Boolean sortsorted, Boolean sortunsorted, LocalDate startDate, Boolean unpaged);

    /**
     * Hääletuse detailid.
     *
     * @param uuid Hääletuse UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PlenaryVotingDetails object if successful.
     */
    PlenaryVotingDetails getVotingUsingGET(String uuid);

    /**
     * Hääletuse detailid.
     *
     * @param uuid Hääletuse UUID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PlenaryVotingDetails> getVotingUsingGETAsync(String uuid, final ServiceCallback<PlenaryVotingDetails> serviceCallback);

    /**
     * Hääletuse detailid.
     *
     * @param uuid Hääletuse UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryVotingDetails object
     */
    Observable<PlenaryVotingDetails> getVotingUsingGETAsync(String uuid);

    /**
     * Hääletuse detailid.
     *
     * @param uuid Hääletuse UUID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryVotingDetails object
     */
    Observable<ServiceResponse<PlenaryVotingDetails>> getVotingUsingGETWithServiceResponseAsync(String uuid);
    /**
     * Hääletuse detailid.
     *
     * @param uuid Hääletuse UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PlenaryVotingDetails object if successful.
     */
    PlenaryVotingDetails getVotingUsingGET(String uuid, String lang);

    /**
     * Hääletuse detailid.
     *
     * @param uuid Hääletuse UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PlenaryVotingDetails> getVotingUsingGETAsync(String uuid, String lang, final ServiceCallback<PlenaryVotingDetails> serviceCallback);

    /**
     * Hääletuse detailid.
     *
     * @param uuid Hääletuse UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryVotingDetails object
     */
    Observable<PlenaryVotingDetails> getVotingUsingGETAsync(String uuid, String lang);

    /**
     * Hääletuse detailid.
     *
     * @param uuid Hääletuse UUID
     * @param lang Keel. Possible values include: 'et', 'ru', 'en'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PlenaryVotingDetails object
     */
    Observable<ServiceResponse<PlenaryVotingDetails>> getVotingUsingGETWithServiceResponseAsync(String uuid, String lang);

}
